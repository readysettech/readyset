import Layout from '../components/layout'
import {useUser} from '@auth0/nextjs-auth0';
import {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'
import {xonokai} from 'react-syntax-highlighter/dist/cjs/styles/prism'

const About = () => {
    const {user, error, isLoading} = useUser();

    return (
        <Layout user={user} loading={isLoading}>
            <h1 id="cube.js">Setting up Readyset Free Tier and Cube.js</h1>
            <h2 id="set-up-readyset">Set Up ReadySet Free Tier</h2>
            <ul>
                <li>Login and run the Readyset installer</li>
                <li>Follow the prompts and set up a MySQL Deployment when prompted</li>
                <li>Note the ReadySet connection string generated by the installer (we’ll need it for Cube.js)
                    <ul>
                        <li>Example: <code>$ mysql -h127.0.0.1 -uroot -preadyset -P3307 --database=readyset</code></li>
                    </ul></li>
            </ul>
            <h2 id="download-example-data-set">Download Example Data Set</h2>
            <p>Any decently sized dataset will do but a good option is one of the <a
                href="https://www.imdb.com/interfaces/">IMBD Datasets</a>.
                For the sake of this tutorial we’ll assume you’re using the IMBD dataset <code>title.basics.tsv</code>.
            </p>
            <p><code>title.basics.tsv.gz</code> Contains the following fields:</p>

            <SyntaxHighlighter language="text" style={xonokai}>
                {'tconst (string) - alphanumeric unique identifier of the title\n' +
                    'titleType (string) – the type/format of the title (e.g. movie, short, tvseries, tvepisode, video, etc)\n' +
                    'primaryTitle (string) – the more popular title / the title used by the filmmakers on promotional materials at the point of release\n' +
                    'originalTitle (string) - original title, in the original language\n' +
                    'isAdult (boolean) - 0: non-adult title; 1: adult title\n' +
                    'startYear (YYYY) – represents the release year of a title. In the case of TV Series, it is the series start year\n' +
                    'endYear (YYYY) – TV Series end year. ‘\\N’ for all other title types\n' +
                    'runtimeMinutes – primary runtime of the title, in minutes\n' +
                    'genres (string array) – includes up to three genres associated with the title'}
            </SyntaxHighlighter>

            <p>First we’ll need to create a table for the entries in the tsv file we just downloaded.</p>
            <p>Connect to the MySQL database using the connection string generated in step 1 and create a new table with
                the following schema.</p>

            <SyntaxHighlighter language="sql" style={xonokai}>
                {'(\n' +
                    'tconst         VARCHAR(10) NOT NULL PRIMARY KEY,\n' +
                    'titleType      VARCHAR(50),\n' +
                    'primaryTitle   TEXT,\n' +
                    'originalTitle  TEXT,\n' +
                    'isAdult        BOOLEAN,\n' +
                    'startYear      INTEGER,\n' +
                    'endYear        INTEGER,\n' +
                    'runtimeMinutes INTEGER,\n' +
                    'genres TEXT\n' +
                    ')'}
            </SyntaxHighlighter>

            <p>Modify <code>~/.local/share/readyset/compose/&lt;deployment-name&gt;.yml</code> (the ReadySet deployment
                docker compose file created by the installer) and add the following command and volume mount:</p>
            <SyntaxHighlighter language="yaml" style={xonokai}>
                {'  mysql:\n' +
                    '...\n' +
                    '    command: --secure-file-priv=\'/opt/\'\n' +
                    '...\n' +
                    '    volumes:\n' +
                    '      - "<dataset-mount-directory>/title.basics.tsv/data.tsv:/opt/title.basics.tsv/data.tsv"\n'}
            </SyntaxHighlighter>
            <p><em>(note that these flags can be removed from the docker compose files once the data set has been
                loaded)</em></p>
            <p>Connect to the MySQL database and load the example dataset into the newly created table.</p>
            <pre className="mysql"><code>load data infile &#39;/opt/title.basics.tsv/data.tsv&#39; into table imbd_title_basics ignore 1 lines;</code></pre>
            <h2 id="set-up-cube.js">Set Up Cube.js</h2>
            <ul>
                <li><p>Run a Cube.js container locally using host networking via the following command:</p>
                    <SyntaxHighlighter language="bash" style={xonokai}>
                        {'docker run -p 4040:4000 -v ${PWD}:/cube/conf -e CUBEJS_DEV_MODE=true  --net=host cubejs/cube\n'}
                    </SyntaxHighlighter>
                    <em>Note we remap port 4040 to 4000 to avoid port collisions with Grafana.</em></li>
                <li>Navigate to <code>localhost:4040</code> to view Cube.js and select MySQL from the “Set Up a Database
                    Connection” screen.
                </li>
                <li><p>Pass the host, username, password, and database name generated by the ReadySet installer to
                    Cube.js using the UI accessed at <code>localhost:4040</code> after the Cube.js container launches.
                </p></li>
            </ul>
            <h3 id="optional-make-changes-to-docker-compose-file">(Optional) Make Changes to Docker Compose File</h3>
            <p>Add the following lines to <code>~/.local/share/readyset/compose/&lt;deployment-name&gt;.yml</code> <em>in
                lieu</em> of running Cube.js using docker run.</p>
            <SyntaxHighlighter language="yaml" style={xonokai}>
                {'  cube:\n' +
                    '    image: cubejs/cube:latest\n' +
                    '    ports:\n' +
                    '      - 4040:4000\n' +
                    '      - 3000:3000\n' +
                    '    environment:\n' +
                    '      - CUBEJS_DEV_MODE=true\n' +
                    '    volumes:\n' +
                    '      - .:/cube/conf\n'}
            </SyntaxHighlighter>
            <p>By making these modifications you’ll want to pass <code>readyset-adapter</code> for the hostname instead
                of the hostname generated by the ReadySet installer for the port at the “Set Up a Database connection”
                prompt.</p>
        </Layout>
    )
}

export default About
