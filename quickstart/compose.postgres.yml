name: readyset-postgres
services:
  cache:
    image: docker.io/readysettech/readyset:latest
    platform: linux/amd64
    expose:
      - 6033  # ReadySet Server Prometheus metrics at http://readyset:6033/metrics
      - 6034  # ReadySet Adapter Prometheus metrics at http://readyset:6034/metrics
    ports:
      # The ReadySet Adapter listen port, i.e. what your application / SQL shell connects to
      - "5433:5433"
    environment:
      DEPLOYMENT_ENV: quickstart_docker
      DB_DIR: /state
      PROMETHEUS_METRICS: true
      QUERY_CACHING: explicit
      QUERY_LOG: true
      QUERY_LOG_AD_HOC: true
      STANDALONE: true
      DEPLOYMENT: docker_compose_deployment
      LISTEN_ADDRESS: 0.0.0.0:5433
      UPSTREAM_DB_URL: postgresql://postgres:readyset@postgres/testdb
      CONTROLLER_ADDRESS: 0.0.0.0
    volumes:
      - "readyset:/state"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "127.0.0.1:6033/health" ]
      interval: 2s
      timeout: 1s
      retries: 5
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
  prometheus:
    image: public.ecr.aws/readyset/readyset-prometheus:latest
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 12
    expose:
      - 9090
    volumes:
      - "prometheus:/prometheus"
  pushgateway:
    image: prom/pushgateway
    expose:
      - 9091
  grafana:
    image: public.ecr.aws/readyset/readyset-grafana:latest
    ports:
      - "4000:4000"
    environment:
      UPSTREAM_DB_URL: postgresql://postgres:readyset@postgres/testdb
      RS_PORT: 5433
      RS_GRAFANA_PORT: 4000
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_PASSWORD=readyset
      - POSTGRES_DB=testdb
    expose:
      - 5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - postgres:/var/lib/postgresql/data
volumes:
  postgres: ~
  prometheus: ~
  readyset: ~
