steps:
  - label: ':docker: Build build image'
    key: build-image
    commands:
    - 'echo --- :docker: Building image'
    - >-
      docker build -f build/Dockerfile \
        --cache-from 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest \
        -t 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest \
        .
    - 'echo --- :docker: Pushing image'
    - 'docker push 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest'
    plugins:
      ecr#v2.2.0:
        login: true

  - label: ":docker: Build readyset-server image"
    key: readyset-server-image
    commands:
      - "echo --- :docker: Building readyset-server image"
      - >-
        docker build -f build/Dockerfile.readyset-server \
          --cache-from 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-server:latest \
          -t 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-server:latest \
          .
      - "echo --- :docker: Pushing image"
      - "docker push 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-server:latest"
    plugins:
      ecr#v2.2.0:
        login: true

  - label: ':docker: Build prettier image'
    key: prettier-image
    commands:
    - 'echo --- :docker: Building image'
    - >-
      docker build -f build/Dockerfile.prettier \
        --cache-from 305232526136.dkr.ecr.us-east-2.amazonaws.com/prettier:latest \
        -t 305232526136.dkr.ecr.us-east-2.amazonaws.com/prettier:latest \
        .
    - 'echo --- :docker: Pushing image'
    - 'docker push 305232526136.dkr.ecr.us-east-2.amazonaws.com/prettier:latest'
    plugins:
      ecr#v2.2.0:
        login: true

  - label: ':docker: Build cargo-audit image'
    key: cargo-audit-image
    commands:
      #- 'echo --- :docker: Pulling image'
      #- 'docker pull 305232526136.dkr.ecr.us-east-2.amazonaws.com/cargo-audit:latest'
    - 'echo --- :docker: Building image'
    - >-
      docker build -f build/Dockerfile.cargo-audit \
        --cache-from 305232526136.dkr.ecr.us-east-2.amazonaws.com/cargo-audit:latest \
        -t 305232526136.dkr.ecr.us-east-2.amazonaws.com/cargo-audit:latest \
        .
    - 'echo --- :docker: Pushing image'
    - 'docker push 305232526136.dkr.ecr.us-east-2.amazonaws.com/cargo-audit:latest'
    plugins:
      ecr#v2.2.0:
        login: true

  - label: ':rust: Check rustfmt'
    key: check-rustfmt
    commands:
    - "cargo --locked fmt -- --check"
    depends_on:
    - build-image
    plugins:
      - docker#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest'
          volumes:
          - 'target:/workdir/target'
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
      - ecr#v2.2.0:
          login: true

  - label: ':prettier: Check prettier'
    commands:
    - prettier --check "/workdir/js-client/**/*.js"
    depends_on:
    - prettier-image
    plugins:
      - docker#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/prettier:latest'
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
      - ecr#v2.2.0:
          login: true

  - label: ':rust: :lock: Check cargo-audit'
    commands:
    - cargo --locked audit
    depends_on:
    - cargo-audit-image
    plugins:
      - docker#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/cargo-audit:latest'
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
      - ecr#v2.2.0:
          login: true

  - label: ':clippy: Check clippy'
    key: check-clippy
    commands:
    - cargo --locked clippy --all -- -D warnings
    depends_on:
    - build-image
    plugins:
      - docker#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest'
          volumes:
          - 'target:/workdir/target'
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
      - ecr#v2.2.0:
          login: true

  - label: ":rust: Build js-client shared library"
    key: build-js-client-lib
    commands:
      - "echo +++ :rust: Running cargo build"
      - RUSTFLAGS='-D warnings' cargo --locked build --release -p js-client
      - strip target/release/libjs_client.so
    artifact_paths:
      - target/release/libjs_client.so
    depends_on:
      - build-image
    plugins:
      - docker#v3.7.0:
          image: "305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest"
          volumes:
            - "cargo-registry:/usr/local/cargo/registry"
            - "cargo-registry:/usr/local/cargo/registry"
          environment:
            - SCCACHE_BUCKET=readyset-sccache-e1
            - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
            - CARGO_INCREMENTAL=0
      - ecr#v2.2.0:
          login: true

  - label: ":nodejs: Test js-client"
    depends_on:
      - readyset-server-image
      - build-js-client-lib
    command:
      - "echo --- downloading js-client artifact"
      - buildkite-agent artifact download target/release/libjs_client.so .
      - mv target/release/libjs_client.so index.node
      - "echo --- :yarn: installing dependecies"
      - yarn install
      - "echo +++ :jest: running js-client tests"
      - yarn run test
    plugins:
      - docker-compose#v3.7.0:
          run: node
          config: js-client/tests/build/docker-compose.yaml
          mount-buildkite-agent: true
      - ecr#v2.2.0:
          login: true

  - label: ':rust: Run tests'
    key: rust-tests
    command: .buildkite/run-tests.sh
    timeout_in_minutes: 60
    depends_on:
    - build-image
    plugins:
      - docker-compose#v3.7.0:
          run: app
          env:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
          config:
            - docker-compose.yml
            - build/docker-compose.ci-test.yaml
          mount-buildkite-agent: true
      - ecr#v2.2.0:
          login: true
    env:
      SCCACHE_BUCKET: readyset-sccache

  - label: 'Run logictest'
    key: logictest
    command:
    - 'echo +++ Running noria-logictest'
    - cargo --locked run --bin noria-logictest -- verify logictests
    timeout_in_minutes: 60
    depends_on:
    - build-image
    plugins:
      - docker-compose#v3.7.0:
          run: app
          env:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
          config:
            - docker-compose.yml
            - build/docker-compose.ci-test.yaml
      - ecr#v2.2.0:
          login: true
    env:
      SCCACHE_BUCKET: readyset-sccache

  - label: 'Run logictest with binlog replication'
    key: logictest-binlog
    command:
    - 'echo +++ Running noria-logictest with binlog replication'
    - cargo --locked run --bin noria-logictest -- verify --binlog-mysql mysql://root:noria@mysql logictests
    - cargo --locked run --bin noria-logictest -- verify -r --binlog-mysql mysql://root:noria@mysql logictests/framework
    timeout_in_minutes: 60
    depends_on:
    - build-image
    plugins:
      - docker-compose#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest'
          run: app
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
          config:
            - docker-compose.yml
            - build/docker-compose.ci-test.yaml
      - ecr#v2.2.0:
          login: true

  - label: ':rust: Deploy docs'
    branches: 'master'
    command:
    - 'echo +++ :rust: Building docs'
    - cargo --locked doc --workspace --document-private-items
    - 'echo +++ :ec2: Deploying docs'
    - apt-get install -y rsync
    - mkdir -p ~/.ssh
    - echo '172.31.41.177 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBByYJ6scdtZbyjpIeBB1BrIcfUI/jMYo/re6/0U8ulKEdeh8gyhQ/ujaktSeTQy6yJUE7bIPlpYja2zMsHkOycg=' > ~/.ssh/known_hosts
    - rsync -azPve ssh target/doc/ admin@172.31.41.177:/var/www/docs
    plugins:
      - docker#v3.7.0:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:latest'
          volumes:
          - 'target:/workdir/target'
          - 'cargo-registry:/usr/local/cargo/registry'
          environment:
          - SCCACHE_BUCKET=readyset-sccache-e1
          - AWS_IAM_CREDENTIALS_URL=http://169.254.169.254/latest/meta-data/iam/security-credentials/buildkite-Role
          - CARGO_INCREMENTAL=0
          mount-ssh-agent: true
      - ecr#v2.2.0:
          login: true

# --- OPS STEPS ----#

  - label: ':terraform: Terraform fmt'
    commands:
    - cd ops/tf/readyset
    - terraform fmt -check -recursive -diff
    plugins:
    - docker#v3.7.0:
        image: hashicorp/terraform:0.14.7
        entrypoint: ""
        shell: ["/bin/sh", "-c"]

  - label: ':terraform: Terraform validate'
    commands:
    - cd ops/tf/readyset
    - terraform init -backend=false
    - terraform validate
    plugins:
    - docker#v3.7.0:
        image: hashicorp/terraform:0.14.7
        entrypoint: ""
        environment:
        # https://github.com/hashicorp/terraform/issues/21408#issuecomment-495746582
        - AWS_DEFAULT_REGION=us-east-2
        shell: ["/bin/sh", "-c"]

  - label: ':terraform: Check terraform best-practices'
    plugins:
    - docker#v3.7.0:
        image: wata727/tflint:latest
        mount-checkout: false
        volumes: ["./ops/tf/modules/readyset:/data"]
        command: [
          "--only", "terraform_deprecated_interpolation",
          "--only", "terraform_deprecated_index",
          "--only", "terraform_unused_declarations",
          "--only", "terraform_comment_syntax",
          "--only", "terraform_documented_outputs",
          "--only", "terraform_documented_variables",
          "--only", "terraform_typed_variables",
          "--only", "terraform_module_pinned_source",
          "--only", "terraform_naming_convention",
          "--only", "terraform_required_version",
          "--only", "terraform_required_providers",
          "--only", "terraform_standard_module_structure",
          "--only", "terraform_workspace_remote"
        ]

  - label: ':packer: Lint Packer configuration'
    key: packer-lint
    plugins:
      - docker#v3.7.0:
          image: 'hashicorp/packer:latest'
          command: ["fmt", "-check", "-diff", "-recursive", "ops/images"]
          workdir: /workspace

  - label: ':pipeline: Build validate packer pipeline'
    command: .buildkite/build-packer-images.sh | buildkite-agent pipeline upload
    env:
      ONLY_VALIDATE: 1
      PIPELINE_METADATA_BUCKET: buildkite-pipeline-metadata/readyset
    depends_on:
      - packer-lint

  - key: list-frameworks
    label: "List frameworks"
    plugins:
      - docker#v3.8.0:
          image: python:3
          command: ["./.buildkite/list-frameworks.sh"]
          mount-buildkite-agent: true
          mount-ssh-agent: true
  - key: generate-pipeline
    label: "Generate framework pipeline"
    depends_on:
    - list-frameworks
    plugins:
      - docker#v3.8.0:
          image: python:3
          command: ["./.buildkite/generate-framework-pipeline.py"]
          mount-buildkite-agent: true
          propagate-environment: true
          environment:
          - MYSQL_ONLY=true
    artifact_paths:
      - ".buildkite/gen/*"
