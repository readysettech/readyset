steps:

  - label: ':bk-status-pending:'
    command: .buildkite/set_gerrit_running.sh
    agents:
      queue: t3a-small

  - wait: ~

  - label: ':git: Lint commits'
    key: lint-commits
    branches: '!refs/heads/main'
    commands:
      - ./scripts/commit_lint.sh
    agents:
      queue: t3a-small

  # Do not run pipeline if the lint has not passed
  - wait: ~

  - label: ":partyparrot: Creating the pipeline"
    agents:
      queue: t3a-small
    plugins:
      - Zegocover/git-diff-conditional#v1.1.1:
          log_level: DEBUG
          diff: "git diff --name-only HEAD HEAD~1"
          dynamic_pipeline: ".buildkite/pipeline.common.yml"
          steps:
            # Since we always want to be able to build a release binary, always build the build image.
            - label: ':docker: Build build image'

            # Since we always want to be able to build docker images, always build the base image.
            - label: ':docker: Build builder base image'

            - label: ':rust: Check rustfmt'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain
                - ops/readyset-substrate

            - label: ':docker: Build cargo-deny image'
              include:
                - build/Dockerfile.cargo-deny
                - deny.toml
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':rust: :lock: Check cargo-deny'
              include:
                - build/Dockerfile.cargo-deny
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':clippy: Check clippy'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain
                - ops/readyset-substrate

            - label: ":docker: Build readyset-server debug image"
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':docker: Build readyset-mysql debug image'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':docker: Build readyset-psql debug image'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':docker: Build readyset-adapter debug image'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':docker: Build metrics-aggregator debug image'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':rust: Run tests'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain
                - ops/readyset-substrate

            - label: 'Run logictest'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: 'Run logictest with MySQL replication'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: 'Test benchmark framework'
              include:
                - "benchmarks/**"

            - label: 'Run clustertests'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ':rust: Deploy docs'
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            # --- START INTERNAL OPS STEPS --- #
            # Since we always want to be able to build images with packer, always build the ops image.
            - label: ':docker: Build readyset-ops image'

            - label: ':terraform: Format/Validate/Lint readyset module'
              include:
                - "ops/tf/**"

            - label: ':packer: Format/Validate images'
              include:
                - "ops/images/**"

            - label: ':shell::heavy_check_mark: shellcheck all scripts'
              include:
                - "ops/images/**"

            - label: ':packer: Run test build for all images'
              include:
                - "ops/images/**"

            - label: ":rust: :docker: Build Substrate Runtime Image"
              include:
                - "ops/readyset-substrate/**"
                - "ops/substrate/**"

            - label: ":rust: :terraform: Run validate and plan on all Substrate root-modules"
              include:
                - "ops/readyset-substrate/**"
                - "ops/substrate/**"

            # --- END INTERNAL OPS STEPS --- #

            # --- START CLOUDFORMATION STEPS --- #
            - label: ":docker: Build readyset-ops-cfn image"
              include:
                - "ops/cfn/**"

            - label: ":aws-cloudformation: Lint with taskcat :cat:"
              include:
                - "ops/cfn/**"
            # --- END CLOUDFORMATION STEPS --- #

            # --- START HELM STEPS --- #
            - label: ':helm: Helm Chart Checks'
              include:
                - "ops/helm/charts/**"
            # --- END HELM STEPS ---- #

            # --- START JS CLIENT STEPS --- #
            - label: ":docker: Build prettier image"
              include:
                - "js-client/**"

            - label: ":prettier: Check prettier"
              include:
                - "js-client/**"

            - label: ":rust: Build js-client shared library"
              include:
                - "js-client/**"

            - label: ":nodejs: Test js-client"
              include:
                - "js-client/**"
            # --- END JS CLIENT STEPS --- #
            - label: "List frameworks"
              include:
                - "readyset-framework-testing/**"

            - label: "Generate framework pipeline"
              include:
                - "readyset-framework-testing/**"

            - label: "Test readyset deployment"
              include:
                - "[!ops]*"
                - Cargo.lock
                - Cargo.toml
                - rust-toolchain

            - label: ":cloud: ReadySet Cloud"
              include: "readyset-cloud/**"

  - wait: ~
    continue_on_failure: true

  - command: ".buildkite/set_gerrit_status.sh"
    key: set-gerrit-status
    agents:
      queue: t3a-small

  - wait

  - trigger: "internal-amis"
    branches: refs/heads/main
    label: ":rocket: Internal AMIs"
    build:
      branch: refs/heads/main
      commit: ${BUILDKITE_COMMIT}
      message: ":rocket: Internal AMIs for ${BUILDKITE_COMMIT}"
    async: true

  - input: "Build telemetry ingress"
    key: input-telemetry-ingress
    depends_on:
    - set-gerrit-status

  - label: ':pipeline: Upload telemetry ingress pipeline'
    depends_on:
      - input-telemetry-ingress
    command:
      - buildkite-agent pipeline upload telemetry-ingress/pipeline.yml
    agents:
      queue: t3a-small

  # If you update any steps below this line, please update docs/src/release-process.md
  - input: "Build installer"
    key: start-installer-release
    branches: refs/heads/main
    depends_on:
    - set-gerrit-status

  - label: ":docker: Build readyset-server release image"
    key: readyset-server-release-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-builder-base-image
    command:
      - RELEASE=true .buildkite/build-image-with-builder.sh build/Dockerfile.readyset-server readyset-server .
      - docker tag 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-server:release-${BUILDKITE_COMMIT} readyset-server:release-${BUILDKITE_COMMIT}
      - docker save readyset-server:release-${BUILDKITE_COMMIT} | gzip > readyset-server-release-${BUILDKITE_COMMIT}.tar.gz
      - buildkite-agent artifact upload readyset-server-release-${BUILDKITE_COMMIT}.tar.gz
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":docker: Build readyset-mysql release image"
    key: readyset-mysql-release-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-builder-base-image
    command:
      - RELEASE=true .buildkite/build-image-with-builder.sh build/Dockerfile.readyset-mysql readyset-mysql .
      - docker tag 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-mysql:release-${BUILDKITE_COMMIT} readyset-mysql:release-${BUILDKITE_COMMIT}
      - docker save readyset-mysql:release-${BUILDKITE_COMMIT} | gzip > readyset-mysql-release-${BUILDKITE_COMMIT}.tar.gz
      - buildkite-agent artifact upload readyset-mysql-release-${BUILDKITE_COMMIT}.tar.gz
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":docker: Build readyset-psql release image"
    key: readyset-psql-release-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-builder-base-image
    command:
      - RELEASE=true .buildkite/build-image-with-builder.sh build/Dockerfile.readyset-psql readyset-psql .
      - docker tag 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-psql:release-${BUILDKITE_COMMIT} readyset-psql:release-${BUILDKITE_COMMIT}
      - docker save readyset-psql:release-${BUILDKITE_COMMIT} | gzip > readyset-psql-release-${BUILDKITE_COMMIT}.tar.gz
      - buildkite-agent artifact upload readyset-psql-release-${BUILDKITE_COMMIT}.tar.gz
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":docker: Build readyset-adapter release image"
    key: readyset-adapter-release-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-builder-base-image
    command:
      - RELEASE=true .buildkite/build-image-with-builder.sh build/Dockerfile.readyset-adapter readyset-adapter .
      - docker tag 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-adapter:release-${BUILDKITE_COMMIT} readyset-adapter:release-${BUILDKITE_COMMIT}
      - docker save readyset-adapter:release-${BUILDKITE_COMMIT} | gzip > readyset-adapter-release-${BUILDKITE_COMMIT}.tar.gz
      - buildkite-agent artifact upload readyset-adapter-release-${BUILDKITE_COMMIT}.tar.gz
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":docker: Build metrics-aggregator release image"
    key: metrics-aggregator-release-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-builder-base-image
    command:
      - RELEASE=true .buildkite/build-image-with-builder.sh build/Dockerfile.metrics-aggregator metrics-aggregator .
      - docker tag 305232526136.dkr.ecr.us-east-2.amazonaws.com/metrics-aggregator:release-${BUILDKITE_COMMIT} readyset-metrics-aggregator:release-${BUILDKITE_COMMIT}
      - docker save readyset-metrics-aggregator:release-${BUILDKITE_COMMIT} | gzip > readyset-metrics-aggregator-release-${BUILDKITE_COMMIT}.tar.gz
      - buildkite-agent artifact upload readyset-metrics-aggregator-release-${BUILDKITE_COMMIT}.tar.gz
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":docker: :s3: Upload docker saves to S3"
    key: upload-docker-s3
    branches: refs/heads/main
    depends_on:
      - readyset-mysql-release-image
      - readyset-psql-release-image
      - readyset-server-release-image
      - readyset-adapter-release-image
    command:
      - .buildkite/upload-installer-docker-images.sh
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::888984949675:role/InstallerS3
    agents:
      queue: ops

  - label: ':docker: Build readyset-installer build image'
    key: build-installer-image
    branches: refs/heads/main
    depends_on:
      - start-installer-release
    command: .buildkite/build-image-with-builder.sh build/Dockerfile.readyset-installer readyset-installer .
    plugins:
      ecr#v2.5.0:
        login: true
        retries: 3

  - label: ":tux: Build Linux ReadySet Installer Binaries"
    key: build-linux-installer
    branches: refs/heads/main
    depends_on:
      - start-installer-release
      - build-installer-image
    commands:
      - "echo +++ :computer: running build for Linux ReadySet Installer Binaries"
      - if buildkite-agent meta-data exists release-name; then
      -   export READYSET_CFN_PREFIX=$(buildkite-agent meta-data get release-name)
      - else
      -   export READYSET_CFN_PREFIX="alpha/${BUILDKITE_COMMIT}"
      - fi
      - export READYSET_DOCKER_TAG="release-${BUILDKITE_COMMIT}"
      - export TELEMETRY_BASE_URL="https://telemetry.readyset.io"
      - .buildkite/build-linux-installer.sh
    artifact_paths:
      - target/x86_64-unknown-linux-musl/release/readyset-installer
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-installer:${BUILDKITE_COMMIT}
          volumes:
            - 'cargo-registry:/usr/local/cargo/registry'
          environment:
            - CACHEPOT_BUCKET=readysettech-build-sccache-us-east-2
            - CACHEPOT_REGION=us-east-2
            - CARGO_INCREMENTAL=0
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":apple: Build Apple ReadySet Installer Binaries"
    key: build-apple-installer
    branches: refs/heads/main
    agents:
      queue: apple
      apple: m1
    env:
      PATH: /opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/administrator/.cargo/bin
    depends_on:
      - start-installer-release
    commands:
      - "echo +++ :computer: running build for Apple ReadySet Installer"
      - if buildkite-agent meta-data exists release-name; then
      -   export READYSET_CFN_PREFIX=$(buildkite-agent meta-data get release-name)
      - else
      -   export READYSET_CFN_PREFIX="alpha/${BUILDKITE_COMMIT}"
      - fi
      - export READYSET_DOCKER_TAG="release-${BUILDKITE_COMMIT}"
      - export TELEMETRY_BASE_URL="https://telemetry.readyset.io"
      - .buildkite/build-apple-installer.sh
    artifact_paths:
      - target/x86_64-apple-darwin/release/readyset-installer
      - target/aarch64-apple-darwin/release/readyset-installer

  - label: ":s3: Deploy ReadySet Installer"
    key: deploy-installer
    branches: refs/heads/main
    depends_on:
      - build-linux-installer
      - build-apple-installer
      - upload-docker-s3
      - build-ops-image
    command: .buildkite/deploy-installer.sh
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
          mount-buildkite-agent: true
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::888984949675:role/InstallerS3
    agents:
      queue: ops

  - block: "Build, test, and upload internal :amazon-ec2: AMIs and :aws-cloudformation: CloudFormation templates"
    key: block-ami-cfn
    prompt: "Build AMIs and CloudFormation templates?"

  - label: ":rust: Build ReadySet release binaries"
    key: build-binaries
    depends_on:
      - block-ami-cfn
      - build-image
    commands:
      - "echo +++ :rust: Running cargo build"
      - RUSTFLAGS='-D warnings' cargo build --release --bin noria-server --bin noria-mysql --bin noria-psql --bin ensure-ebs-volume --bin metrics-aggregator --bin basic_validation_test
      - strip target/release/noria-server target/release/noria-mysql target/release/noria-psql target/release/ensure-ebs-volume target/release/metrics-aggregator target/release/basic_validation_test
    artifact_paths:
      - target/release/noria-server
      - target/release/noria-mysql
      - target/release/noria-psql
      - target/release/ensure-ebs-volume
      - target/release/metrics-aggregator
      - target/release/basic_validation_test
    plugins:
      - docker#v3.9.0:
          image: "305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:${BUILDKITE_COMMIT}"
          volumes:
            - "cargo-registry:/usr/local/cargo/registry"
          environment:
            - CACHEPOT_BUCKET=readysettech-build-sccache-us-east-2
            - CACHEPOT_REGION=us-east-2
            - CARGO_INCREMENTAL=0
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":packer: Create ReadySet :amazon-ec2: AMIs with release binaries"
    key: packer-build
    depends_on:
      - build-binaries
    commands:
      - cd /workdir/ops/images
      - mkdir binaries
      - "echo +++ :buildkite: Downloading binary artifacts"
      - buildkite-agent artifact download target/release/* binaries/
      - packer init .
      - "echo +++ :packer: Running packer build"
      - packer build -only=amazon-ebs.readyset-* .
      - "echo +++ :buildkite: Uploading manifest artifact"
      - buildkite-agent artifact upload packer-manifest.json
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          environment:
            - PACKER_CREATE_AMI=true
            - PACKER_PRODUCTION=true
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":python: :yaml: Build CloudFormation templates with updated :amazon-ec2: AMI references"
    key: packer-cfn-template-ytt
    depends_on:
      - packer-build
    commands:
      - buildkite-agent artifact download packer-manifest.json --step packer-build ./ops/image-deploy
      - cd ops/cfn/templates
      - ytt_apply.sh -i ../ytt_templates -m ../../image-deploy/packer-manifest.json -o ./
      - buildkite-agent artifact upload "./*.yaml"
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":rain_cloud: Format and Lint CloudFormation templates"
    key: packer-cfn-template-lint
    depends_on:
      - packer-cfn-template-ytt
    commands:
      - cd ops/cfn
      - mkdir ./rendered_templates
      - buildkite-agent artifact download "*.yaml" --step packer-cfn-template-ytt ./rendered_templates
      - rain fmt --verify rendered_templates/*
      - cfn-lint rendered_templates/*.yaml
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":aws: Upload CloudFormation templates for internal use"
    key: packer-cfn-template-copy
    depends_on:
      - packer-cfn-template-lint
    commands:
      - export TEMPLATE_ARTIFACT_STEP_NAME=packer-cfn-template-ytt
      - export S3_BUCKET=readysettech-cfn-internal-us-east-2
      - export S3_PREFIX=${BUILDKITE_COMMIT}
      - .buildkite/upload-cfn-templates-artifacts-to-s3.sh
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::888984949675:role/InternalArtifactsWrite
    agents:
      queue: ops

  - label: ":aws: :cloud: CloudFormation deployment Smoke Test. :chart_with_upwards_trend:"
    key: test-cfn-stack
    depends_on:
      - packer-cfn-template-copy
    commands:
      - .buildkite/cfn-smoke-test.sh
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::305232526136:role/InternalCloudFormationCI
    agents:
      queue: ops

  # Benchmarking
  - trigger: "readyset-benchmarks"
    label: ":algolia: Performance Benchmarks"
    depends_on:
      - test-cfn-stack
    build:
      branch: ${BUILDKITE_BRANCH}
      commit: ${BUILDKITE_COMMIT}
      message: ":algolia: Performance Benchmarks for ${BUILDKITE_COMMIT}"
    async: true

  - block: "Deploy :amazon-ec2: AMIs and :aws-cloudformation: CloudFormation alpha release"
    key: block-public-alpha
    prompt: "Copy AMIs and CloudFormation templates to public visibility?"
    branches: "!refs/heads/main"

  - block: "Deploy :amazon-ec2: AMIs and :aws-cloudformation: CloudFormation release"
    key: block-public-release
    prompt: "Copy AMIs and CloudFormation templates to public visibility?"
    fields:
      - key: release-name
        required: true
        text: Release Name (This name WILL be seen by customers)
    branches: "refs/heads/main"

  - label: ":packer: Run copy production images to deploy account"
    key: packer-deploy-external
    depends_on:
      - block-public-alpha
      - block-public-release
      - packer-build
    commands:
      - cd /workdir/ops/image-deploy
      - buildkite-agent artifact download packer-manifest.json .
      - mv packer-manifest.json source-packer-manifest.json
      - packer init .
      - ./run-with-manifest-as-env.sh source-packer-manifest.json packer build -only=amazon-ebs.readyset-* .
      - buildkite-agent artifact upload packer-manifest.json
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
          environment:
            - PACKER_CREATE_AMI=true
            - PACKER_PRODUCTION=true
      - ecr#v2.5.0:
          login: true
          retries: 3
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::888984949675:role/Packer
    agents:
      queue: ops

  - label: ":python: :yaml: Build CloudFormation templates with updated :amazon-ec2: AMI references"
    key: packer-cfn-template-ytt-external
    depends_on: packer-deploy-external
    commands:
      - buildkite-agent artifact download packer-manifest.json --step packer-deploy-external ./ops/image-deploy
      - cd ops/cfn/templates
      - ytt_apply.sh -i ../ytt_templates -m ../../image-deploy/packer-manifest.json -o ./
      - buildkite-agent artifact upload "./*.yaml"
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":rain_cloud: Format and Lint CloudFormation templates"
    key: packer-cfn-template-lint-external
    depends_on: packer-cfn-template-ytt-external
    commands:
      - cd ops/cfn
      - mkdir ./rendered_templates
      - buildkite-agent artifact download "*.yaml" --step packer-cfn-template-ytt-external ./rendered_templates
      - rain fmt --verify rendered_templates/*
      - cfn-lint rendered_templates/*.yaml
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3

  - label: ":aws: Upload CloudFormation templates for external use"
    key: packer-cfn-template-copy-external
    depends_on: packer-cfn-template-lint-external
    commands:
      - export TEMPLATE_ARTIFACT_STEP_NAME=packer-cfn-template-ytt-external
      - export S3_BUCKET=readysettech-cfn-public-us-east-2
      - if buildkite-agent meta-data exists release-name; then
      -   export S3_PREFIX=$(buildkite-agent meta-data get release-name)
      - else
      -   export S3_PREFIX="alpha/${BUILDKITE_COMMIT}"
      - fi
      - .buildkite/upload-cfn-templates-artifacts-to-s3.sh
    plugins:
      - docker#v3.9.0:
          image: 305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-ops:${BUILDKITE_COMMIT}
          propagate-environment: true
          propagate-aws-auth-tokens: true
      - ecr#v2.5.0:
          login: true
          retries: 3
      - cultureamp/aws-assume-role#v0.2.0
    env:
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::305232526136:role/DeployCustomerArtifactsWrite
    agents:
      queue: ops
