---
AWSTemplateFormatVersion: "2010-09-09"
Description: Readyset MySQL Cluster
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Network Configuration"
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: "SSH Access Configuration"
        Parameters:
          - BastionSecurityGroupID
          - KeyPairName
      - Label:
          default: "Consul Configuration"
        Parameters:
          - ConsulJoinManagedPolicyArn
          - ConsulEc2RetryJoinTagKey
          - ConsulEc2RetryJoinTagValue
      - Label:
          default: "Readyset Configuration"
        Parameters:
          - ReadysetAdapterInstanceType
          - ReadysetAdapterNodes
          - ReadysetServerInstanceType
          - ReadysetServerNodes
          - ReadysetLogsAggregatorInstanceType
          - MySQLDatabaseURL
          - DeploymentName
Parameters:
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)
    Type: "AWS::EC2::SecurityGroup::Id"
  ReadysetAdapterInstanceType:
    Type: String
    Description: The EC2 instance type to use for adapter instances.
    Default: t3.small
  ReadysetServerInstanceType:
    Type: String
    Description: The EC2 instance type to use for server instances.
    Default: t3.small
  ReadysetLogsAggregatorInstanceType:
    Type: String
    Description: The EC2 instance type to use for the logs aggregation instance.
    Default: t3.small
  ReadysetAdapterNodes:
    Type: String
    Description: Number of Adapter nodes to create
  ReadysetServerNodes:
    Type: String
    Description: Number of Adapter nodes to create
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: VPC ID
    Type: "AWS::EC2::VPC::Id"
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  ConsulJoinManagedPolicyArn:
    Description: ARN of an managed IAM policy that the permissions to find Consul Servers
    Type: String
  ConsulEc2RetryJoinTagKey:
    Description:
      The EC2 instance tag key to filter on when joining to other Consul
      nodes.
    Type: String
    Default: "ReadysetConsulNodeType"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  ConsulEc2RetryJoinTagValue:
    Description:
      The EC2 instance tag value to filter on when joining to other Consul
      nodes.
    Type: String
    Default: "Server"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  MySQLDatabaseURL:
    Type: String
    NoEcho: True
    # TODO: Allowed Pattern
  DeploymentName:
    Description:
      A unique name for the ReadySet deployment. This is used to differentiate multiple ReadySet deployments with the same Consul cluster
    Type: String
    MinLength: 1
    AllowedPattern: >-
      ^[^/ ]+$
    ConstraintDescription: must be non-empty and cannot contain slashes ("/") or spaces
# Update this with the latest AMI
Mappings:
  AWSAMIRegionMap:
    us-east-2:
      # short commit id associated with AMIs: 3ce7621
      READYSETMYSQLADAPTER: ami-00766736074b7efc2
      READYSETSERVER: ami-0471aa1298712fab7
      LOGSAGGREGATOR: ami-0dd25fd72d9b1b415
Resources:
  # --- START MYSQL ADAPTER --- #
  ReadysetMySQLAdapterRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadysetMySQLAdapterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetMySQLAdapterRole
  ReadysetMySQLAdapterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to the adapter and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadysetMySQLAdapterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: TCP
      Port: 3306
      VpcId: !Ref VPCID
  ReadysetMySQLAdapterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadysetAdapterInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ReadysetMySQLAdapterSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETMYSQLADAPTER
      IamInstanceProfile: !Ref ReadysetMySQLAdapterProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetMySQLAdapterASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export UPSTREAM_DB_URL="${MySQLDatabaseURL}"
            export DEPLOYMENT="${DeploymentName}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  ReadysetMySQLAdapterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadysetMySQLAdapterLC
      MaxSize: !Ref ReadysetAdapterNodes
      MinSize: !Ref ReadysetAdapterNodes
      TargetGroupARNs:
        - !Ref ReadysetMySQLAdapterTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Readyset-MySQLAdapter"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadysetAdapterNodes
        Timeout: PT20M
  ReadysetMySQLAdapterNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "network"
      Scheme: "internal"
      Subnets:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
  ReadysetMySQLAdapterListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 3306
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReadysetMySQLAdapterTargetGroup
      LoadBalancerArn: !Ref ReadysetMySQLAdapterNLB
  ReadysetMySQLAdapterVPCEndpoint:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      AcceptanceRequired: false
      NetworkLoadBalancerArns:
        - !Ref ReadysetMySQLAdapterNLB
  # --- END MYSQL ADAPTER --- #
  # --- START SERVER --- #
  ReadysetServerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadysetServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetServerRole
  ReadysetServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and between servers and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 6033
          ToPort: 6033
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadysetMySQLAdapterSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
          ToPort: 61000
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadysetMySQLAdapterSecurityGroup
            - GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  # Seperate ingress rule for self referential ingress rule to prevent circular dependency.
  ReadySetServerSecurityGroupIngressControllerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ReadysetServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6033
      ToPort: 6033
      SourceSecurityGroupId: !Ref ReadysetServerSecurityGroup
  ReadysetServerSecurityGroupIngressWorkerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - ReadysetServerSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
      ToPort: 61000
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ReadysetServerSecurityGroup
          - GroupId
  ReadysetServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadysetServerInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ReadysetServerSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETSERVER
      IamInstanceProfile: !Ref ReadysetServerProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetServerASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export DEPLOYMENT="${DeploymentName}"
            export NORIA_MEMORY_BYTES="0"
            export NORIA_PRIMARY_REGION="${AWS::Region}"
            export NORIA_QUORUM="1"
            export NORIA_REGION="${AWS::Region}"
            export NORIA_SHARDS="1"
            export REPLICATION_URL="${MySQLDatabaseURL}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  ReadysetServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadysetServerLC
      MaxSize: !Ref ReadysetServerNodes
      MinSize: !Ref ReadysetServerNodes
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Readyset-Server"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadysetServerNodes
        Timeout: PT20M
  # --- END SERVER --- #
  ReadysetDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections from Readyset to RDS
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ReadysetMySQLAdapterSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ReadysetServerSecurityGroup
  # --- START LOGS AGGREGATOR --- #
  ReadysetAggregatorCloudWatchLogsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource: "*"
  ReadysetLogsAggregatorRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
        - !Ref ReadysetAggregatorCloudWatchLogsManagedPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadysetLogsAggregatorProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetLogsAggregatorRole
  ReadysetLogsAggregatorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and from the aggregator within the VPC.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadysetLogsAggregatorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ReadysetLogsAggregatorInstanceType
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroupIds:
        - !Ref ReadysetLogsAggregatorSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - LOGSAGGREGATOR
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Logs-Aggregator"]]
      IamInstanceProfile: !Ref ReadysetLogsAggregatorProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetServerASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  # --- END LOGS AGGREGATOR --- #
Outputs:
  ReadysetDBSecurityGroup:
    Value: !Ref ReadysetDBSecurityGroup
    Description: Attach this Security Group to your RDS instance.
  ReadysetAdapterNLBDNSName:
    Value: !GetAtt
      - ReadysetMySQLAdapterNLB
      - DNSName
    Description: Host for Readyset connection string.
  ReadysetMySQLVPCEndpoint:
    Value: !Ref ReadysetMySQLAdapterVPCEndpoint
