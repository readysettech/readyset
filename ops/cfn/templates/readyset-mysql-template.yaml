---
AWSTemplateFormatVersion: "2010-09-09"
Description: ReadySet MySQL Cluster
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Network Configuration"
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: "SSH Access Configuration"
        Parameters:
          - BastionSecurityGroupID
          - KeyPairName
      - Label:
          default: "Consul Configuration"
        Parameters:
          - ConsulJoinManagedPolicyArn
          - ConsulEc2RetryJoinTagKey
          - ConsulEc2RetryJoinTagValue
      - Label:
          default: "ReadySet Configuration"
        Parameters:
          - ReadySetAdapterInstanceType
          - ReadySetAdapterNodes
          - ReadySetServerInstanceType
          - ReadySetServerNodes
          - ReadySetMonitorInstanceType
          - ReadySetServerVolumeSizeGB
          - ReadySetMemoryLimitGB
          - ReadySetDeploymentName
          - MySQLDatabaseURL
Parameters:
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)
    Type: "AWS::EC2::SecurityGroup::Id"
  ReadySetAdapterInstanceType:
    Type: String
    Description: The EC2 instance type to use for ReadySet Adapter instances.
    Default: m5.large
    AllowedPattern: '^(\w)5.*'
    ConstraintDescription: Instance type must be 5th generation
  ReadySetServerInstanceType:
    Type: String
    Description: The EC2 instance type to use for ReadySet Server instances.
    Default: c5.4xlarge
    AllowedPattern: '^(\w)5.*'
    ConstraintDescription: Instance type must be 5th generation
  ReadySetMonitorInstanceType:
    Type: String
    Description: The EC2 instance type to use for the ReadySet monitoring instance.
    Default: c5.large
    AllowedPattern: '^(\w)5.*'
    ConstraintDescription: Instance type must be 5th generation
  ReadySetAdapterNodes:
    Type: String
    Default: 3
    AllowedPattern: >-
      ^\d+$
    Description: Number of Adapter nodes to create.
  ReadySetServerNodes:
    Type: String
    Default: 3
    AllowedPattern: >-
      ^\d+$
    Description: Number of Server nodes to create.
  ReadySetServerVolumeSizeGB:
    Type: Number
    Description: Volume size, in gigabytes, to provision for Server instances.
    MinValue: 32
    Default: 32
  ReadySetMemoryLimitGB:
    Type: Number
    Description: Memory limit for readyset server instances, in gigabytes. This should generally be set to around 80% of the memory available on the instance. A memory limit of 0 (the default) disables eviction entirely.
    Default: 0
    MinValue: 0
  ReadySetDeploymentName:
    Description:
      A unique name for the ReadySet deployment. This is used to differentiate multiple ReadySet deployments with the same Consul cluster
    Type: String
    MinLength: 1
    AllowedPattern: >-
      ^[^/ ]+$
    ConstraintDescription: Must be non-empty and cannot contain slashes ("/") or spaces
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: VPC ID
    Type: "AWS::EC2::VPC::Id"
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  ConsulJoinManagedPolicyArn:
    Description: ARN of an managed IAM policy that the permissions to find Consul Servers
    Type: String
  ConsulEc2RetryJoinTagKey:
    Description:
      The EC2 instance tag key to filter on when joining to other Consul nodes.
    Type: String
    Default: "ReadysetConsulNodeType"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  ConsulEc2RetryJoinTagValue:
    Description:
      The EC2 instance tag value to filter on when joining to other Consul nodes.
    Type: String
    Default: "Server"
    ConstraintDescription: Must match EC2 Tag Value requirements.
  MySQLDatabaseURL:
    Type: String
    NoEcho: True
    Description: Existing Database URL connection string, e.g. mysql://username:password@localhost:3306/mydatabase
# Update this with the latest AMI
Mappings:
  AWSAMIRegionMap:
    us-east-2:
      # short commit id associated with AMIs: 209c959
      READYSETMYSQLADAPTER: ami-046e4471d38dc542e
      READYSETSERVER: ami-021f5b4a1ef4eff47
      READYSETMONITOR: ami-06732b8cf5f88d9ea
Resources:
  # --- START MYSQL ADAPTER --- #
  ReadySetMySQLAdapterRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadySetMySQLAdapterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadySetMySQLAdapterRole
  ReadySetMySQLAdapterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to the adapter and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 6034
          ToPort: 6034
          CidrIp: !Ref VPCCIDR
          Description: Adapter HTTP server port, required for health checks.
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadySetMySQLAdapterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckPort: 6034
      Port: 3306
      Protocol: TCP
      VpcId: !Ref VPCID
  ReadySetMySQLAdapterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadySetAdapterInstanceType
      AssociatePublicIpAddress: false
      EbsOptimized: true
      SecurityGroups:
        - !Ref ReadySetMySQLAdapterSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETMYSQLADAPTER
      IamInstanceProfile: !Ref ReadySetMySQLAdapterProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadySetMySQLAdapterASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export UPSTREAM_DB_URL="${MySQLDatabaseURL}"
            export DEPLOYMENT="${ReadySetDeploymentName}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  ReadySetMySQLAdapterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadySetMySQLAdapterLC
      MaxSize: !Ref ReadySetAdapterNodes
      MinSize: !Ref ReadySetAdapterNodes
      TargetGroupARNs:
        - !Ref ReadySetMySQLAdapterTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Readyset-MySQLAdapter"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadySetAdapterNodes
        Timeout: PT20M
  ReadySetMySQLAdapterNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "network"
      Scheme: "internal"
      Subnets:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
  ReadySetMySQLAdapterListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 3306
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReadySetMySQLAdapterTargetGroup
      LoadBalancerArn: !Ref ReadySetMySQLAdapterNLB
  ReadySetMySQLAdapterVPCEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      NetworkLoadBalancerArns:
        - !Ref ReadySetMySQLAdapterNLB
  # --- END MYSQL ADAPTER --- #
  # --- START SERVER --- #
  ReadySetServerASGLifecycleTerminateSQS:
    Type: AWS::SQS::Queue
  ReadySetServerASGRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: autoscaling.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadySetServerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyName: ReadySetServerEBSVolumePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - ec2:CreateVolume
                - ec2:DescribeVolumes
                - ec2:CreateTags
                Resource: '*'
              - Effect: Allow
                Action:
                - ec2:AttachVolume
                - ec2:DetachVolume
                Resource:
                - "arn:aws:ec2:*:*:volume/*"
                Condition:
                  'Null':
                    'aws:ResourceTag/ReadySet:ServerVolume': 'false'
              - Effect: Allow
                Action:
                - ec2:AttachVolume
                - ec2:DetachVolume
                Resource:
                - "arn:aws:ec2:*:*:instance/*"
  ReadySetServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadySetServerRole
  ReadySetServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and between servers and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 6033
          ToPort: 6033
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadySetMySQLAdapterSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
          ToPort: 61000
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadySetMySQLAdapterSecurityGroup
            - GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  # Seperate ingress rule for self referential ingress rule to prevent circular dependency.
  ReadySetServerSecurityGroupIngressControllerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ReadySetServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6033
      ToPort: 6033
      SourceSecurityGroupId: !Ref ReadySetServerSecurityGroup
  ReadySetServerSecurityGroupIngressWorkerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - ReadySetServerSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
      ToPort: 61000
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ReadySetServerSecurityGroup
          - GroupId
  ReadySetServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadySetServerInstanceType
      EbsOptimized: true
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ReadySetServerSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETSERVER
      IamInstanceProfile: !Ref ReadySetServerProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadySetServerASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export SQS_QUEUE_URL="${SqsQueueUrl}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export DEPLOYMENT="${ReadySetDeploymentName}"
            export NORIA_MEMORY_LIMIT_GB="${ReadySetMemoryLimitGB}"
            export NORIA_PRIMARY_REGION="${AWS::Region}"
            export NORIA_QUORUM="${ReadySetServerNodes}"
            export NORIA_REGION="${AWS::Region}"
            export NORIA_SHARDS="0"
            export REPLICATION_URL="${MySQLDatabaseURL}"
            export VOLUME_SIZE_GB="${ReadySetServerVolumeSizeGB}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - SqsQueueUrl: !GetAtt
              - ReadySetServerASGLifecycleTerminateSQS
              - Arn
  ReadySetServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadySetServerLC
      MaxSize: !Ref ReadySetServerNodes
      MinSize: !Ref ReadySetServerNodes
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      LifecycleHookSpecificationList:
        - LifecycleHookName: ReadySetServerASGTerminateSNS
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
          NotificationTargetARN: !GetAtt
            - ReadySetServerASGLifecycleTerminateSQS
            - Arn
          RoleARN: !GetAtt
            - ReadySetServerASGRole
            - Arn
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "ReadySet-Server"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadySetServerNodes
        Timeout: PT20M
  # --- END SERVER --- #
  ReadySetDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections from ReadySet to RDS
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ReadySetMySQLAdapterSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ReadySetServerSecurityGroup
  # --- START LOGS AGGREGATOR --- #
  ReadySetAggregatorCloudWatchLogsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "cloudwatch:PutMetricData"
            Resource: "*"
  ReadySetMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
        - !Ref ReadySetAggregatorCloudWatchLogsManagedPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadySetMonitorProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadySetMonitorRole
  ReadySetMonitorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and from the aggregator within the VPC.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9091
          CidrIp: !Ref VPCCIDR
          Description: Allow connections to a prometheus scrape endpoint and server within the VPC.
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref VPCCIDR
          Description: Allow connections to the grafana server within the VPC.
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadySetMonitorInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Properties:
      InstanceType: !Ref ReadySetMonitorInstanceType
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroupIds:
        - !Ref ReadySetMonitorSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - READYSETMONITOR
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Monitor"]]
      IamInstanceProfile: !Ref ReadySetMonitorProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadySetMonitorInstance"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export DEPLOYMENT="${ReadySetDeploymentName}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  # --- END LOGS AGGREGATOR --- #
Outputs:
  ReadySetDBSecurityGroup:
    Value: !Ref ReadySetDBSecurityGroup
    Description: Attach this Security Group to your RDS instance.
  ReadySetAdapterNLBDNSName:
    Value: !GetAtt
      - ReadySetMySQLAdapterNLB
      - DNSName
    Description: Host for ReadySet connection string.
  ReadySetMySQLVPCEndpointService:
    Value: !Ref ReadySetMySQLAdapterVPCEndpointService
    Description: VPC Endpoint Service to allow connections from outside the VPC.
