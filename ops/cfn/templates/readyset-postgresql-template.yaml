---
AWSTemplateFormatVersion: "2010-09-09"
Description: Readyset for PostgreSQL
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Network Configuration"
        Parameters:
          - VPCID
          - VPCCIDR
          - VPCPrivateSubnetIds
      - Label:
          default: "SSH Access Configuration"
        Parameters:
          - BastionSecurityGroupID
          - KeyPairName
      - Label:
          default: "Consul Configuration"
        Parameters:
          - ConsulJoinManagedPolicyArn
          - ConsulEc2RetryJoinTagKey
          - ConsulEc2RetryJoinTagValue
      - Label:
          default: "Readyset Configuration"
        Parameters:
          - ReadysetAdapterInstanceType
          - ReadysetAdapterNodes
          - ReadysetServerInstanceType
          - ReadysetServerNodes
          - ReadysetServerVolumeSizeGB
          - ReadysetMonitorInstanceType
          - PostgresDatabaseURL
          - MemoryLimitBytes
          - DeploymentName
Parameters:
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  ReadysetAdapterInstanceType:
    Type: String
    Description: The EC2 instance type to use for ReadySet Adapter instances.
    Default: t3.small
  ReadysetServerInstanceType:
    Type: String
    Description: The EC2 instance type to use for ReadySet Server instances.
    Default: c5.4xlarge
  ReadysetMonitorInstanceType:
    Type: String
    Description: The EC2 instance type to use for the ReadySet monitoring instance.
    Default: t3.small
  ReadysetAdapterNodes:
    Type: String
    Description: Number of ReadySet Adapter nodes to create.
  ReadysetServerNodes:
    Type: String
    Description: Number of ReadySet Server nodes to create.
  ReadysetServerVolumeSizeGB:
    Type: Number
    Description: Volume size, in gigabytes, to provision for Server instances. This should match EBS volume size of RDS instance.
    MinValue: 32
    Default: 32
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  VPCPrivateSubnetIds:
    Description: Comma-delimited list of private VPC subnet IDs within the target VPC (e.g. subnet-1234,subnet-4567,subnet-8910).
    Type: List<AWS::EC2::Subnet::Id>
  VPCID:
    Description: ID of the VPC to deploy resources in.
    Type: AWS::EC2::VPC::Id
    AllowedPattern: (^vpc-\w+)
  VPCCIDR:
    Description: CIDR block for the VPC.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  ConsulJoinManagedPolicyArn:
    Description: ARN of an managed IAM policy that the permissions to find Consul Servers
    Type: String
  ConsulEc2RetryJoinTagKey:
    Description:
      The EC2 instance tag key to filter on when joining to other Consul nodes.
    Type: String
    Default: "ReadysetConsulNodeType"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  ConsulEc2RetryJoinTagValue:
    Description:
      The EC2 instance tag value to filter on when joining to other Consul nodes.
    Type: String
    Default: "Server"
    ConstraintDescription: Must match EC2 Tag Value requirements.
  PostgresDatabaseURL:
    Type: String
    NoEcho: True
    Description: Existing Database URL connection string, e.g. postgresql://username:password@localhost:5432/mydatabase
  MemoryLimitBytes:
    Type: Number
    Description: Memory limit for readyset server instances, in gigabytes. This should generally be set to around 80% of the memory available on the instance. A memory limit of 0 (the default) disables eviction entirely.
    Default: 0
    MinValue: 0
  DeploymentName:
    Description:
      A unique name for the ReadySet deployment. This is used to differentiate multiple ReadySet deployments with the same Consul cluster
    Type: String
    MinLength: 1
    AllowedPattern: >-
      ^[^/ ]+$
    ConstraintDescription: Must be non-empty and cannot contain slashes ("/") or spaces
# Update this with the latest AMI
Mappings:
  AWSAMIRegionMap:
    us-east-2:
      # short commit id associated with AMIs: 9a5ffb581
      READYSETPOSTGRESQLADAPTER: ami-0cf64137831c10aee
      READYSETSERVER: ami-08576e703af0d21e9
      READYSETMONITOR: ami-0aeafda7a724f0234
Resources:
  ReadysetPostgreSQLAdapterRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadysetPostgreSQLAdapterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetPostgreSQLAdapterRole
  ReadysetPostgreSQLAdapterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to the adapter and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 6034
          ToPort: 6034
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadysetPostgreSQLAdapterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckPort: 6034
      Port: 5432
      Protocol: TCP
      VpcId: !Ref VPCID
  ReadysetPostgreSQLAdapterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadysetAdapterInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ReadysetPostgreSQLAdapterSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETPOSTGRESQLADAPTER
      IamInstanceProfile: !Ref ReadysetPostgreSQLAdapterProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetPostgreSQLAdapterASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export UPSTREAM_DB_URL="${PostgresDatabaseURL}"
            export DEPLOYMENT="${DeploymentName}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  ReadysetPostgreSQLAdapterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadysetPostgreSQLAdapterLC
      MaxSize: !Ref ReadysetAdapterNodes
      MinSize: !Ref ReadysetAdapterNodes
      TargetGroupARNs:
        - !Ref ReadysetPostgreSQLAdapterTargetGroup
      VPCZoneIdentifier: !Ref VPCPrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Readyset-PostgreSQLAdapter"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadysetAdapterNodes
        Timeout: PT20M
  ReadysetPostgreSQLAdapterNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "network"
      Scheme: "internal"
      IpAddressType: "ipv4"
      Subnets: !Ref VPCPrivateSubnetIds
  ReadysetPostgreSQLAdapterListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 5432
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReadysetPostgreSQLAdapterTargetGroup
      LoadBalancerArn: !Ref ReadysetPostgreSQLAdapterNLB
  ReadysetPostgreSQLAdapterVPCEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      NetworkLoadBalancerArns:
        - !Ref ReadysetPostgreSQLAdapterNLB
  # --- END PostgreSQL ADAPTER --- #
  # --- START SERVER --- #
  ReadysetServerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyName: ReadysetServerEBSVolumePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - ec2:CreateVolume
                - ec2:DescribeVolumes
                - ec2:CreateTags
                Resource: '*'
              - Effect: Allow
                Action:
                - ec2:AttachVolume
                - ec2:DetachVolume
                Resource:
                - "arn:aws:ec2:*:*:volume/*"
                Condition:
                  StringEquals:
                    'aws:ResourceTag/ReadySet:ServerVolume': 'true'
              - Effect: Allow
                Action:
                - ec2:AttachVolume
                - ec2:DetachVolume
                Resource:
                - "arn:aws:ec2:*:*:instance/*"
  ReadysetServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetServerRole
  ReadysetServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and between servers and SSH from inside the VPC
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 6033
          ToPort: 6033
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadysetPostgreSQLAdapterSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
          ToPort: 61000
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ReadysetPostgreSQLAdapterSecurityGroup
            - GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  # Seperate ingress rule for self referential ingress rule to prevent circular dependency.
  ReadySetServerSecurityGroupIngressControllerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ReadysetServerSecurityGroup
      IpProtocol: tcp
      FromPort: 6033
      ToPort: 6033
      SourceSecurityGroupId: !Ref ReadysetServerSecurityGroup
  ReadysetServerSecurityGroupIngressWorkerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - ReadysetServerSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 32768 # https://en.wikipedia.org/wiki/Ephemeral_port
      ToPort: 61000
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ReadysetServerSecurityGroup
          - GroupId
  ReadysetServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref ReadysetServerInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ReadysetServerSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - READYSETSERVER
      IamInstanceProfile: !Ref ReadysetServerProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetServerASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export DEPLOYMENT="${DeploymentName}"
            export NORIA_MEMORY_BYTES="${MemoryLimitBytes}"
            export NORIA_PRIMARY_REGION="${AWS::Region}"
            export NORIA_QUORUM="${ReadysetServerNodes}"
            export NORIA_REGION="${AWS::Region}"
            export NORIA_SHARDS="0"
            export REPLICATION_URL="${PostgresDatabaseURL}"
            export VOLUME_SIZE_GB="${ReadysetServerVolumeSizeGB}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  ReadysetServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ReadysetServerLC
      MaxSize: !Ref ReadysetServerNodes
      MinSize: !Ref ReadysetServerNodes
      VPCZoneIdentifier: !Ref VPCPrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Readyset-Server"]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadysetServerNodes
        Timeout: PT20M
  # --- END SERVER --- #
  ReadysetDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections from Readyset to Postgres RDS
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ReadysetPostgreSQLAdapterSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ReadysetServerSecurityGroup
  # --- START LOGS AGGREGATOR --- #
  ReadysetAggregatorCloudWatchLogsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "cloudwatch:PutMetricData"
            Resource: "*"
  ReadysetMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ConsulJoinManagedPolicyArn
        - !Ref ReadysetAggregatorCloudWatchLogsManagedPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
  ReadysetMonitorProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ReadysetMonitorRole
  ReadysetMonitorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to and from the aggregator within the VPC.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9091
          CidrIp: !Ref VPCCIDR
          Description: Allow connections to a prometheus scrape endpoint and server within the VPC.
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref VPCCIDR
          Description: Allow connections to the grafana server within the VPC.
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8301
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  ReadysetMonitorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ReadysetMonitorInstanceType
      SubnetId: !Select [ 0, !Ref VPCPrivateSubnetIds ]
      SecurityGroupIds:
        - !Ref ReadysetMonitorSecurityGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - READYSETMONITOR
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Monitor"]]
      IamInstanceProfile: !Ref ReadysetMonitorProfile
      UserData:
        Fn::Base64: !Sub
          - |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -v
            set -eu -o pipefail
            export AWS_CLOUDFORMATION_STACK="${AWS::StackName}"
            export AWS_CLOUDFORMATION_RESOURCE="ReadysetServerASG"
            export AWS_CLOUDFORMATION_REGION="${AWS::Region}"
            export CONSUL_TAG_KEY="${ConsulEc2RetryJoinTagKey}"
            export CONSUL_TAG_VALUE="${ConsulEc2RetryJoinTagValue}"
            export DEPLOYMENT="${DeploymentName}"
            exec /usr/local/bin/user-data-init.sh
            --==BOUNDARY==
          - {}
  # --- END LOGS AGGREGATOR --- #
Outputs:
  ReadysetDBSecurityGroup:
    Value: !Ref ReadysetDBSecurityGroup
    Description: Attach this Security Group to your RDS instance.
  ReadysetAdapterNLBDNSName:
    Value: !GetAtt
      - ReadysetPostgreSQLAdapterNLB
      - DNSName
    Description: Host for Readyset connection string.
  ReadysetPostgreSQLVPCEndpointService:
    Value: !Ref ReadysetPostgreSQLAdapterVPCEndpointService
    Description: VPC Endpoint Service to allow connections from outside the VPC.
