use std::env;

use anyhow::{bail, Result};
use reqwest::blocking as http;
use serde_json::json;
use tracing::{debug, info};

use crate::{substrate, terraform};

pub(crate) fn post_terraform_plan(
    root_module: &substrate::RootModule,
    plan: &terraform::Plan,
) -> Result<()> {
    let (change_id, patchset) = match (env::var("GERRIT_CHANGE_ID"), env::var("GERRIT_PATCHSET")) {
        (Ok(change_id), Ok(patchset)) => (change_id, patchset),
        _ => {
            info!(
                "Not a CL build (no GERRIT_CHANGE_ID or GERRIT_PATCHSET env vars), skipping posting comment"
            );
            return Ok(());
        }
    };

    let comment_text = format!(
        "Plan generated for terraform module {}:\n\n```\n{}\n```",
        root_module,
        plan.describe()?
    );

    let url = format!(
        "{}#{}",
        env::var("BUILDKITE_BUILD_URL")?,
        env::var("BUILDKITE_JOB_ID")?
    );

    // https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#robot-comment-input
    let body = json!({
        "omit_duplicate_comments": true,
        "tag": "autogenerated:buildkite-terraform~result",
        "robot_comments": {
            "/PATCHSET_LEVEL": [{
                "path": "/PATCHSET_LEVEL",
                "robot_id": "buildkite-terraform",
                "robot_run_id": env::var("BUILDKITE_BUILD_ID")?,
                "message": comment_text,
                "url": url,
            }]
        }
    });

    let url = format!(
        "https://gerrit.readyset.name/a/changes/{}/revisions/{}/review",
        change_id, patchset,
    );

    let client = http::Client::new();
    debug!(%url, %body);
    let resp = client
        .post(url)
        .json(&body)
        .basic_auth("buildkite", Some(env::var("BUILDKITE_GERRIT_PASSWORD")?))
        .send()?;

    if !resp.status().is_success() {
        bail!(
            "HTTP request to gerrit failed with status {}: {}",
            resp.status(),
            String::from_utf8_lossy(&resp.bytes()?)
        );
    }

    Ok(())
}
