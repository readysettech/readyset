use std::cmp::Ordering;
use std::collections::HashMap;
use std::convert::TryFrom;
use std::fmt;
use std::future::Future;
use std::hash::{Hash, Hasher};
use std::net::SocketAddr;
use std::ops::{Bound, Range, RangeBounds};
use std::sync::{Arc, Mutex};
use std::task::{Context, Poll};
use std::time::Duration;

use async_bincode::{AsyncBincodeStream, AsyncDestination};
use dataflow_expression::Expression as DataflowExpression;
use futures_util::future::TryFutureExt;
use futures_util::stream::futures_unordered::FuturesUnordered;
use futures_util::stream::{StreamExt, TryStreamExt};
use futures_util::{future, ready};
use launchpad::intervals::{cmp_start_end, BoundPair};
use nom_sql::{BinaryOperator, Column, ColumnSpecification, SqlIdentifier, SqlType};
use noria_data::DataType;
use noria_errors::{internal_err, rpc_err, view_err, ReadySetError, ReadySetResult};
use petgraph::graph::NodeIndex;
use proptest::arbitrary::Arbitrary;
use serde::{Deserialize, Serialize};
use tokio_tower::multiplex;
use tower::balance::p2c::Balance;
use tower::buffer::Buffer;
use tower::limit::concurrency::ConcurrencyLimit;
use tower::timeout::Timeout;
use tower_service::Service;
use tracing::error;
use vec1::Vec1;
pub(crate) mod results;

use self::results::{Results, Row};
use crate::consistency::Timestamp;
use crate::{Tagged, Tagger};

type Transport = AsyncBincodeStream<
    tokio::net::TcpStream,
    Tagged<ReadReply>,
    Tagged<ReadQuery>,
    AsyncDestination,
>;

/// Index of a key column as it exists in the underlying state. During a migration this will be
/// used throughout MIR. In steady state this will refer to the reader key columns.
pub type KeyColumnIdx = usize;

/// Index of a placeholder variable as it appears in the SQL query
pub type PlaceholderIdx = usize;

/// Representation of how a key column in a view maps back to a placeholder in the original query
#[derive(Hash, Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
pub enum ViewPlaceholder {
    /// This key column was generated by Noria, and has no mapping to the original query. This is
    /// the case, for example, for a "bogokey" column generated for unparametrized queries.
    Generated,

    /// This key column corresponds one-to-one to a placeholder in the original query
    OneToOne(PlaceholderIdx),

    /// This key column corresponds to a double-ended "BETWEEN"-style range lookup in the original
    /// query, with the given placeholder indexes for the lower and upper bounds of the range
    /// respectively
    Between(PlaceholderIdx, PlaceholderIdx),

    /// This key column is the page number of a paginated query, which must be calculated by
    /// dividing the value for the `OFFSET` clause by the value for the `LIMIT` in the query
    PageNumber {
        /// The index of the placeholder for the `OFFSET` clause of the original query
        offset_placeholder: PlaceholderIdx,
        /// The `LIMIT` (page size) in the query
        limit: u64,
    },
}

impl From<Option<PlaceholderIdx>> for ViewPlaceholder {
    fn from(opt: Option<PlaceholderIdx>) -> Self {
        match opt {
            None => Self::Generated,
            Some(idx) => Self::OneToOne(idx),
        }
    }
}

#[derive(Debug)]
struct Endpoint {
    addr: SocketAddr,
    timeout: Duration,
}

/// Identifies the source base table column for a projected column
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ColumnBase {
    /// The name of the column in the base table
    pub column: SqlIdentifier,
    /// The name of the base table for this column
    pub table: SqlIdentifier,
}

/// Combines the specification for a columns with its base name
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ColumnSchema {
    /// The specification for the column
    pub spec: ColumnSpecification,
    /// If the column is an alias, this field represents its base column
    pub base: Option<ColumnBase>,
}

impl ColumnSchema {
    /// Create a new ColumnSchema from a ColumnSpecification representing a column directly in a
    /// base table with the given name.
    pub fn from_base(spec: ColumnSpecification, table: SqlIdentifier) -> Self {
        Self {
            base: Some(ColumnBase {
                column: spec.column.name.clone(),
                table,
            }),
            spec,
        }
    }
}

/// A `ViewSchema` is used to desribe the columns of a stored Noria
/// view as a vector of columns. The ViewSchema contains a vector with all
/// projected columns and a vector with columns returned to the client.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ViewSchema {
    /// The set of columns returned to the client when executing this query.
    returned_cols: Vec<ColumnSchema>,
    /// The set of columns projected at the noria flowgraph reader node.
    projected_cols: Vec<ColumnSchema>,
}

/// SchemaType is passed to most ViewSchema functions to select between the two
/// schemas contained in the ViewSchema struct.
pub enum SchemaType {
    /// Used to select the schema returned to the client when executing this
    /// query.
    ReturnedSchema,
    /// Used to select the schema projected at the noria flowgraph reader node.
    ProjectedSchema,
}

type InnerService = multiplex::Client<
    multiplex::MultiplexTransport<Transport, Tagger>,
    tokio_tower::Error<multiplex::MultiplexTransport<Transport, Tagger>, Tagged<ReadQuery>>,
    Tagged<ReadQuery>,
>;

impl Service<()> for Endpoint {
    type Response = InnerService;
    type Error = tokio::io::Error;

    type Future = impl Future<Output = Result<Self::Response, Self::Error>>;

    fn poll_ready(&mut self, _: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        Poll::Ready(Ok(()))
    }

    fn call(&mut self, _: ()) -> Self::Future {
        let f = tokio::net::TcpStream::connect(self.addr);
        let timeout = self.timeout;
        async move {
            let s = tokio::time::timeout(timeout, f).await??;
            s.set_nodelay(true)?;
            let s = AsyncBincodeStream::from(s).for_async();
            let t = multiplex::MultiplexTransport::new(s, Tagger::default());
            Ok(multiplex::Client::with_error_handler(
                t,
                |e| error!(error = %e, "View server went away"),
            ))
        }
    }
}

impl ViewSchema {
    /// Create a ViewSchema from returned and projected column schema vectors
    pub fn new(returned_cols: Vec<ColumnSchema>, projected_cols: Vec<ColumnSchema>) -> ViewSchema {
        ViewSchema {
            returned_cols,
            projected_cols,
        }
    }

    /// Get the schema specified by the schema type
    pub fn schema(&self, schema_type: SchemaType) -> &[ColumnSchema] {
        match schema_type {
            SchemaType::ReturnedSchema => &self.returned_cols,
            SchemaType::ProjectedSchema => &self.projected_cols,
        }
    }

    /// Return a vector specifiying the types of the columns for the requested indices
    pub fn col_types<I>(&self, indices: I, schema_type: SchemaType) -> ReadySetResult<Vec<&SqlType>>
    where
        I: IntoIterator<Item = usize>,
    {
        let schema = self.schema(schema_type);
        indices
            .into_iter()
            .map(|i| schema.get(i).map(|c| &c.spec.sql_type))
            .collect::<Option<Vec<_>>>()
            .ok_or_else(|| internal_err("Schema expects valid column indices"))
    }

    /// Convert the given iterator [`Columns`] to a `Vec` of [`ColumnSchema`]. The columns match if
    /// either the column name matches (the alias) or the real base name
    pub fn to_cols<'a, 'b, T>(
        &'a self,
        cols: T,
        schema_type: SchemaType,
    ) -> ReadySetResult<Vec<&'a ColumnSchema>>
    where
        T: IntoIterator<Item = &'b Column>,
    {
        let mut by_name = HashMap::new();
        let mut by_base_name = HashMap::new();
        for cs in self.schema(schema_type) {
            by_name.insert(&cs.spec.column.name, cs);
            if let Some(base) = &cs.base {
                by_base_name.insert(&base.column, cs);
            }
        }

        cols.into_iter()
            .map(move |c| {
                by_name
                    .get(&c.name)
                    .or_else(|| by_base_name.get(&c.name))
                    .copied()
                    .ok_or_else(|| internal_err(format!("Column `{}` not found", c)))
            })
            .collect()
    }

    /// Get the indices of the columns in the schema that correspond to the list of provided
    /// [`nom_sql::Column`]. The columns match if either the column name matches (the alias)
    /// or the real base name
    pub fn indices_for_cols<'a, T>(
        &self,
        cols: T,
        schema_type: SchemaType,
    ) -> ReadySetResult<Vec<usize>>
    where
        T: Iterator<Item = &'a Column>,
    {
        let schema = self.schema(schema_type);

        cols.map(|c| {
            schema.iter().position(|e| {
                e.spec.column.name == c.name
                    || e.base.as_ref().map(|b| b.column == c.name).unwrap_or(false)
            })
        })
        .collect::<Option<Vec<_>>>()
        .ok_or_else(|| internal_err("Schema expects all columns to be present"))
    }
}

impl ColumnSchema {
    /// Consume the schema, returning the type for the column
    pub fn take_type(self) -> SqlType {
        self.spec.sql_type
    }
}

fn make_views_stream(
    addr: SocketAddr,
    timeout: Duration,
) -> impl futures_util::stream::TryStream<
    Ok = tower::discover::Change<usize, InnerService>,
    Error = tokio::io::Error,
> {
    // TODO: use whatever comes out of https://github.com/tower-rs/tower/issues/456 instead of
    // creating _all_ the connections every time.
    (0..crate::VIEW_POOL_SIZE)
        .map(|i| async move {
            let svc = Endpoint { addr, timeout }.call(()).await?;
            Ok(tower::discover::Change::Insert(i, svc))
        })
        .collect::<futures_util::stream::FuturesUnordered<_>>()
}

fn make_views_discover(addr: SocketAddr, timeout: Duration) -> Discover {
    make_views_stream(addr, timeout)
}

// Unpin + Send bounds are needed due to https://github.com/rust-lang/rust/issues/55997
type Discover = impl tower::discover::Discover<Key = usize, Service = InnerService, Error = tokio::io::Error>
    + Unpin
    + Send;

pub(crate) type ViewRpc =
    Buffer<Timeout<ConcurrencyLimit<Balance<Discover, Tagged<ReadQuery>>>>, Tagged<ReadQuery>>;

/// Representation for a comparison predicate against a set of keys
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum KeyComparison {
    /// Look up exactly one key
    /// TODO(eta): this comment is crap
    Equal(Vec1<DataType>),

    /// Look up all keys within a range
    Range(BoundPair<Vec1<DataType>>),
}

#[allow(clippy::len_without_is_empty)] // can never be empty
impl KeyComparison {
    /// Project a KeyComparison into an optional equality predicate, or return None if it's a range
    /// predicate. Handles both [`Equal`] and single-length [`Range`]s
    pub fn equal(&self) -> Option<&Vec1<DataType>> {
        match self {
            KeyComparison::Equal(ref key) => Some(key),
            KeyComparison::Range((Bound::Included(ref key), Bound::Included(ref key2)))
                if key == key2 =>
            {
                Some(key)
            }
            _ => None,
        }
    }

    /// Convert a KeyComparison into an optional equality predicate, consuming the key comparison,
    /// or return None if it's a range predicate. Handles both [`Equal`] and single-length
    /// [`Range`]s
    pub fn into_equal(self) -> Option<Vec1<DataType>> {
        match self {
            KeyComparison::Equal(key) => Some(key),
            KeyComparison::Range((Bound::Included(key), Bound::Included(ref key2)))
                if key == *key2 =>
            {
                Some(key)
            }
            _ => None,
        }
    }

    /// Project a KeyComparison into an optional range predicate, or return None if it's a range
    /// predicate
    pub fn range(&self) -> Option<&BoundPair<Vec1<DataType>>> {
        match self {
            KeyComparison::Range(ref range) => Some(range),
            _ => None,
        }
    }

    /// Build a [`KeyComparison`] from a range of keys.
    ///
    /// If the range has length 1 (both the ends are inclusive bounds on the same value) will return
    /// [`KeyComparison::Equal`].
    pub fn from_range<R>(range: &R) -> Self
    where
        R: RangeBounds<Vec1<DataType>>,
    {
        match (range.start_bound(), range.end_bound()) {
            (Bound::Included(key1), Bound::Included(key2)) if key1 == key2 => {
                KeyComparison::Equal(key1.clone())
            }
            (start, end) => KeyComparison::Range((start.cloned(), end.cloned())),
        }
    }

    /// Returns true if this KeyComparison represents a range where the upper bound is less than the
    /// lower bound
    ///
    /// # Examples
    ///
    /// ```
    /// use noria::KeyComparison;
    /// use noria_data::DataType;
    /// use vec1::vec1;
    ///
    /// let not_reversed =
    ///     KeyComparison::from_range(&(vec1![DataType::from(0)]..=vec1![DataType::from(1)]));
    /// assert!(!not_reversed.is_reversed_range());
    ///
    /// let reversed =
    ///     KeyComparison::from_range(&(vec1![DataType::from(1)]..=vec1![DataType::from(0)]));
    /// assert!(reversed.is_reversed_range());
    /// ```
    pub fn is_reversed_range(&self) -> bool {
        cmp_start_end(
            <Self as RangeBounds<Vec1<DataType>>>::start_bound(self),
            <Self as RangeBounds<Vec1<DataType>>>::end_bound(self),
        ) == Ordering::Greater
    }

    /// Returns the shard key(s) that the given cell in this [`KeyComparison`] must target, given
    /// the total number of shards.
    ///
    /// ## Invariants
    /// * the `key_idx` must be in the `key`s.
    /// * the `key`s should have at least one element.
    pub fn shard_keys_at(&self, key_idx: usize, num_shards: usize) -> Vec<usize> {
        match self {
            KeyComparison::Equal(key) => vec![crate::shard_by(
                #[allow(clippy::indexing_slicing)]
                &key[key_idx],
                num_shards,
            )],
            // Since we currently implement hash-based sharding, any non-point query must target all
            // shards. This restriction could be lifted in the future by implementing (perhaps
            // optional) range-based sharding, likely with rebalancing. See Guillote-Blouin, J.
            // (2020) Implementing Range Queries and Write Policies in a Partially-Materialized
            // Data-Flow [Unpublished Master's thesis]. Harvard University S 2.4
            _ => (0..num_shards).collect(),
        }
    }

    /// Returns the shard key(s) that the first column in this [`KeyComparison`] must target, given
    /// the total number of shards
    pub fn shard_keys(&self, num_shards: usize) -> Vec<usize> {
        self.shard_keys_at(0, num_shards)
    }

    /// Returns the length of the key this [`KeyComparison`] is comparing against, or None if this
    /// is an unbounded lookup
    ///
    /// Since all KeyComparisons wrap a [`Vec1`], this function will never return `Some(0)`
    pub fn len(&self) -> Option<usize> {
        match self {
            Self::Equal(key) => Some(key.len()),
            Self::Range((Bound::Unbounded, Bound::Unbounded)) => None,
            Self::Range(
                (Bound::Included(ref key) | Bound::Excluded(ref key), Bound::Unbounded)
                | (Bound::Unbounded, Bound::Included(ref key) | Bound::Excluded(ref key)),
            ) => Some(key.len()),
            Self::Range((
                Bound::Included(ref start) | Bound::Excluded(ref start),
                Bound::Included(ref end) | Bound::Excluded(ref end),
            )) => {
                debug_assert_eq!(start.len(), end.len());
                Some(start.len())
            }
        }
    }

    /// Returns true if the given `key` is covered by this [`KeyComparsion`].
    ///
    /// Concretely, this is the case if the [`KeyComparsion`] is either an [equality][] match on
    /// `key`, or a [range][] match that covers `key`.
    ///
    /// [equality]: KeyComparison::equal
    /// [range]: KeyComparison::range
    ///
    /// # Examples
    ///
    /// Equal keys contain themselves and only themselves:
    ///
    /// ```rust
    /// use noria::KeyComparison;
    /// use noria_data::DataType;
    /// use vec1::vec1;
    ///
    /// let key = KeyComparison::Equal(vec1![1.into(), 2.into()]);
    /// assert!(key.contains(&[1.into(), 2.into()]));
    /// assert!(!key.contains(&[1.into(), 3.into()]));
    /// ```
    ///
    /// Range keys contain anything in the range, comparing lexicographically
    ///
    /// ```rust
    /// use std::ops::Bound::*;
    ///
    /// use noria::KeyComparison;
    /// use noria_data::DataType;
    /// use vec1::vec1;
    ///
    /// let key = KeyComparison::Range((
    ///     Included(vec1![1.into(), 2.into()]),
    ///     Excluded(vec1![1.into(), 5.into()]),
    /// ));
    ///
    /// assert!(key.contains(&[1.into(), 3.into()]));
    /// assert!(!key.contains(&[2.into(), 2.into()]));
    /// ```
    pub fn contains<'a, I>(&'a self, key: I) -> bool
    where
        I: IntoIterator<Item = &'a DataType>,
    {
        match self {
            Self::Equal(equal) => key.into_iter().cmp(equal.iter()) == Ordering::Equal,
            Self::Range((lower, upper)) => (
                lower.as_ref().map(|x| x.iter().collect::<Vec<_>>()),
                upper.as_ref().map(|x| x.iter().collect::<Vec<_>>()),
            )
                .contains(&key.into_iter().collect::<Vec<_>>()),
        }
    }

    /// Returns true if this [`KeyComparison`] is an equality comparison predicate.
    pub fn is_equal(&self) -> bool {
        matches!(self, KeyComparison::Equal(_))
    }

    /// Returns `true` if this [`KeyComparsion`] is a [`Range`] key.
    ///
    /// [`Range`]: KeyComparison::Range
    pub fn is_range(&self) -> bool {
        matches!(self, KeyComparison::Range(..))
    }
}

impl PartialEq for KeyComparison {
    fn eq(&self, other: &Self) -> bool {
        use KeyComparison::*;
        match (self, other) {
            (Equal(k1), Equal(k2)) => k1 == k2,
            (Range(r1), Range(r2)) => r1 == r2,
            (Equal(eq), Range((Bound::Included(k1), Bound::Included(k2)))) => eq == k1 && k1 == k2,
            (Equal(_), Range(_)) => false,
            (Range(_), Equal(_)) => other == self,
        }
    }
}

impl Eq for KeyComparison {}

impl Hash for KeyComparison {
    fn hash<H: Hasher>(&self, state: &mut H) {
        match self {
            Self::Equal(k) => k.hash(state),
            Self::Range((Bound::Included(k1), Bound::Included(k2))) if k1 == k2 => k1.hash(state),
            Self::Range(r) => r.hash(state),
        }
    }
}

impl TryFrom<Vec<DataType>> for KeyComparison {
    type Error = vec1::Size0Error;

    /// Converts to a [`KeyComparison::Equal`]. Returns an error if the input vector is empty
    fn try_from(value: Vec<DataType>) -> Result<Self, Self::Error> {
        Ok(Vec1::try_from(value)?.into())
    }
}

impl TryFrom<(Vec<DataType>, BinaryOperator)> for KeyComparison {
    // FIXME(eta): proper error handling here
    type Error = String;

    fn try_from((value, binop): (Vec<DataType>, BinaryOperator)) -> Result<Self, Self::Error> {
        use self::BinaryOperator::*;

        let value = Vec1::try_from(value).map_err(|e| e.to_string())?;
        let inner = match binop {
            Greater => (Bound::Excluded(value), Bound::Unbounded),
            GreaterOrEqual => (Bound::Included(value), Bound::Unbounded),
            Less => (Bound::Unbounded, Bound::Excluded(value)),
            LessOrEqual => (Bound::Unbounded, Bound::Included(value)),
            Equal => return Ok(value.into()),
            _ => return Err("bad binop!".to_string()),
        };
        Ok(KeyComparison::Range(inner))
    }
}

impl From<Vec1<DataType>> for KeyComparison {
    /// Converts to a [`KeyComparison::Equal`]
    fn from(key: Vec1<DataType>) -> Self {
        KeyComparison::Equal(key)
    }
}

impl From<Range<Vec1<DataType>>> for KeyComparison {
    fn from(range: Range<Vec1<DataType>>) -> Self {
        KeyComparison::Range((Bound::Included(range.start), Bound::Excluded(range.end)))
    }
}

impl TryFrom<BoundPair<Vec<DataType>>> for KeyComparison {
    type Error = vec1::Size0Error;

    /// Converts to a [`KeyComparison::Range`]
    fn try_from((lower, upper): BoundPair<Vec<DataType>>) -> Result<Self, Self::Error> {
        let convert_bound = |bound| match bound {
            Bound::Unbounded => Ok(Bound::Unbounded),
            Bound::Included(x) => Ok(Bound::Included(Vec1::try_from(x)?)),
            Bound::Excluded(x) => Ok(Bound::Excluded(Vec1::try_from(x)?)),
        };
        Ok(Self::Range((convert_bound(lower)?, convert_bound(upper)?)))
    }
}

impl From<BoundPair<Vec1<DataType>>> for KeyComparison {
    /// Converts to a [`KeyComparison::Range`]
    fn from(range: BoundPair<Vec1<DataType>>) -> Self {
        KeyComparison::Range(range)
    }
}

impl RangeBounds<Vec1<DataType>> for KeyComparison {
    fn start_bound(&self) -> Bound<&Vec1<DataType>> {
        use Bound::*;
        use KeyComparison::*;
        match self {
            Equal(ref key) => Included(key),
            Range((Unbounded, _)) => Unbounded,
            Range((Included(ref k), _)) => Included(k),
            Range((Excluded(ref k), _)) => Excluded(k),
        }
    }

    fn end_bound(&self) -> Bound<&Vec1<DataType>> {
        use Bound::*;
        use KeyComparison::*;
        match self {
            Equal(ref key) => Included(key),
            Range((_, Unbounded)) => Unbounded,
            Range((_, Included(ref k))) => Included(k),
            Range((_, Excluded(ref k))) => Excluded(k),
        }
    }
}

impl RangeBounds<Vec<DataType>> for KeyComparison {
    fn start_bound(&self) -> Bound<&Vec<DataType>> {
        self.start_bound().map(Vec1::as_vec)
    }

    fn end_bound(&self) -> Bound<&Vec<DataType>> {
        self.end_bound().map(Vec1::as_vec)
    }
}

impl RangeBounds<Vec1<DataType>> for &KeyComparison {
    fn start_bound(&self) -> Bound<&Vec1<DataType>> {
        use Bound::*;
        use KeyComparison::*;
        match self {
            Equal(ref key) => Included(key),
            Range((Unbounded, _)) => Unbounded,
            Range((Included(ref k), _)) => Included(k),
            Range((Excluded(ref k), _)) => Excluded(k),
        }
    }

    fn end_bound(&self) -> Bound<&Vec1<DataType>> {
        use Bound::*;
        use KeyComparison::*;
        match self {
            Equal(ref key) => Included(key),
            Range((_, Unbounded)) => Unbounded,
            Range((_, Included(ref k))) => Included(k),
            Range((_, Excluded(ref k))) => Excluded(k),
        }
    }
}

impl RangeBounds<Vec<DataType>> for &KeyComparison {
    fn start_bound(&self) -> Bound<&Vec<DataType>> {
        (**self).start_bound()
    }

    fn end_bound(&self) -> Bound<&Vec<DataType>> {
        (**self).end_bound()
    }
}

impl Arbitrary for KeyComparison {
    type Parameters = ();
    fn arbitrary_with(_: Self::Parameters) -> Self::Strategy {
        use proptest::arbitrary::any_with;
        use proptest::prop_oneof;
        use proptest::strategy::Strategy;

        let bound = || {
            any_with::<Bound<Vec<DataType>>>(((1..100).into(), ())).prop_map(|bound| {
                #[allow(clippy::unwrap_used)]
                // This is only used for testing, so we allow calling `unwrap()`, and because we
                // know we are generating vectors of length 1 and beyond.
                bound.map(|k| Vec1::try_from_vec(k).unwrap())
            })
        };

        prop_oneof![
            any_with::<Vec<DataType>>(((1..100).into(), ())).prop_map(|k| {
                #[allow(clippy::unwrap_used)]
                // This is only used for testing, so we allow calling `unwrap()`, and because we
                // know we are generating vectors of length 1 and beyond.
                KeyComparison::try_from(k).unwrap()
            }),
            (bound(), bound()).prop_map(KeyComparison::Range)
        ]
        .boxed()
    }

    type Strategy = proptest::strategy::BoxedStrategy<KeyComparison>;
}

#[doc(hidden)]
#[derive(Serialize, Deserialize, Debug)]
pub enum ReadQuery {
    /// Read from a leaf view
    Normal {
        /// Where to read from
        target: (NodeIndex, SqlIdentifier, usize),
        /// View query to run
        query: ViewQuery,
    },
    /// Read the size of a leaf view
    Size {
        /// Where to read from
        target: (NodeIndex, SqlIdentifier, usize),
    },
    /// Read all keys from a leaf view (for debugging)
    /// TODO(alex): queries with this value are not totally implemented, and might not actually
    /// work
    Keys {
        /// Where to read from
        target: (NodeIndex, SqlIdentifier, usize),
    },
}

/// The result of a lookup to a view.
#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub enum LookupResult<D> {
    /// The view query was executed in non-blocking mode and resulted in a cache miss.
    NonBlockingMiss,
    /// The results of the view query lookup.
    Results(Vec<D>),
}

impl<D> LookupResult<D> {
    /// Maps a set of lookup results from Vec<D> to Vec<U>.
    pub fn map_results<U, F>(self, f: F) -> LookupResult<U>
    where
        F: FnMut(D) -> U,
    {
        match self {
            Self::NonBlockingMiss => LookupResult::NonBlockingMiss,
            Self::Results(d) => LookupResult::Results(d.into_iter().map(f).collect()),
        }
    }

    /// Converts a lookup result into the inner `Results` type.
    pub fn into_results(self) -> Option<Vec<D>> {
        if let Self::Results(v) = self {
            Some(v)
        } else {
            None
        }
    }
}

#[doc(hidden)]
#[derive(Serialize, Deserialize, Debug)]
pub enum ReadReply<D = ReadReplyBatch> {
    /// A reply to a normal lookup request
    Normal(ReadySetResult<LookupResult<D>>),
    /// Read size of view
    Size(usize),
    // Read keys of view
    Keys(Vec<Vec<DataType>>),
}

impl<D> ReadReply<D> {
    /// Convert this [`ReadReply`] into a [`ReadReply::Normal`], consuming self
    pub fn into_normal(self) -> Option<ReadySetResult<LookupResult<D>>> {
        if let Self::Normal(v) = self {
            Some(v)
        } else {
            None
        }
    }
}

#[doc(hidden)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ViewBuilder {
    pub name: SqlIdentifier,
    /// Set of replicas for a view, this will only include one element
    /// if there is no reader replication.
    pub replicas: Vec1<ViewReplica>,

    /// The amount of time before a view request RPC is terminated.
    pub view_request_timeout: Duration,
}

/// A reader replica for a view.
#[doc(hidden)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ViewReplica {
    pub node: NodeIndex,
    pub columns: Arc<[SqlIdentifier]>,
    pub schema: Option<ViewSchema>,
    pub shards: Vec<ReplicaShard>,
    /// (view_placeholder, key_column_index) pairs according to their mapping. Contains exactly one
    /// entry for each key column at the reader.
    pub key_mapping: Vec<(ViewPlaceholder, KeyColumnIdx)>,
}

/// A shard of a reader replica.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ReplicaShard {
    /// The address of the worker where the shard lives in.
    pub addr: SocketAddr,
    /// The region of a shard, as specified by the argument `region`
    /// by the noria-server, where the shard lives in.
    pub region: Option<String>,
}

impl ViewBuilder {
    /// Selects the replica from `replicas` that has the highest fraction of replica
    /// shards in `region`.
    /// Build a `View` out of a `ViewBuilder`. If `region` is specified,
    /// this selects the reader replica with the most shards in the requested
    /// region.
    #[doc(hidden)]
    pub fn build(
        &self,
        region: Option<String>,
        rpcs: Arc<Mutex<HashMap<(SocketAddr, usize), ViewRpc>>>,
    ) -> ReadySetResult<View> {
        let replica = if let Some(region) = region {
            #[allow(clippy::unwrap_used)]
            self.replicas
                .iter()
                .map(|vr| {
                    // Map each replica to a pair of <ViewReplica, percent of shards in region>.
                    let num_replicas = vr
                        .shards
                        .iter()
                        .filter(|s| s.region == Some(region.clone()))
                        .count();
                    (vr, num_replicas as u32 * 100 / vr.shards.len() as u32)
                })
                .max_by_key(|p| p.1) // Take replica with the highest percent.
                // We know there is at least one element in the iterator, so this `unwrap()` is
                // safe.
                .unwrap()
                .0
        } else {
            self.replicas.first()
        };

        let node = replica.node;
        let columns = replica.columns.clone();
        let shards = replica.shards.clone();
        let schema = replica.schema.clone();
        let key_mapping = replica.key_mapping.clone();

        let mut addrs = Vec::with_capacity(shards.len());
        let mut conns = Vec::with_capacity(shards.len());

        for (shardi, shard) in shards.iter().enumerate() {
            use std::collections::hash_map::Entry;

            addrs.push(shard.addr);

            // one entry per shard so that we can send sharded requests in parallel even if
            // they happen to be targeting the same machine.
            let mut rpcs = rpcs
                .lock()
                .map_err(|e| internal_err(format!("mutex was poisoned: '{}'", e)))?;
            let s = match rpcs.entry((shard.addr, shardi)) {
                Entry::Occupied(e) => e.get().clone(),
                Entry::Vacant(h) => {
                    // TODO: maybe always use the same local port?
                    let (c, w) = Buffer::pair(
                        Timeout::new(
                            ConcurrencyLimit::new(
                                Balance::new(make_views_discover(
                                    shard.addr,
                                    self.view_request_timeout,
                                )),
                                crate::PENDING_LIMIT,
                            ),
                            self.view_request_timeout,
                        ),
                        crate::BUFFER_TO_POOL,
                    );
                    use tracing_futures::Instrument;
                    tokio::spawn(w.instrument(tracing::debug_span!(
                        "view_worker",
                        addr = %shard.addr,
                        shard = shardi
                    )));
                    h.insert(c.clone());
                    c
                }
            };
            conns.push(s);
        }

        Ok(View {
            name: self.name.clone(),
            node,
            schema,
            columns,
            key_mapping,
            shard_addrs: addrs,
            shards: Vec1::try_from_vec(conns)
                .map_err(|_| internal_err("cannot create view '{}' without shards"))?,
        })
    }
}

/// A `View` is used to query previously defined external views.
///
/// Note that if you create multiple `View` handles from a single `ControllerHandle`, they may
/// share connections to the Soup workers.
#[derive(Clone)]
pub struct View {
    name: SqlIdentifier,
    node: NodeIndex,
    columns: Arc<[SqlIdentifier]>,
    schema: Option<ViewSchema>,
    /// (view_placeholder, key_column_index) pairs according to their mapping. Contains exactly
    /// one entry for each key column at the reader.
    key_mapping: Vec<(ViewPlaceholder, KeyColumnIdx)>,

    shards: Vec1<ViewRpc>,
    shard_addrs: Vec<SocketAddr>,
}

impl fmt::Debug for View {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("View")
            .field("node", &self.node)
            .field("columns", &self.columns)
            .field("shard_addrs", &self.shard_addrs)
            .finish()
    }
}

/// A read query to be run against a view.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ViewQuery {
    /// Key comparisons to read with.
    pub key_comparisons: Vec<KeyComparison>,
    /// Whether the query should block.
    pub block: bool,
    /// Expression to use to filter values after they're returned from the underlying reader.
    ///
    /// This expression will be evaluaated on each of the rows returned from the reader, and any
    /// rows for which it evaluates to a non-[truthy][] value will be omitted from the result set.
    ///
    /// [truthy]: DataType::is_truthy
    pub filter: Option<DataflowExpression>,
    /// Timestamp to compare against for reads, if a timestamp is passed into the
    /// view query, a read will only return once the timestamp is less than
    /// the timestamp associated with the data.
    // TODO(justin): Verify reads block on timestamps once timestamps have a definition
    // with Ord.
    pub timestamp: Option<Timestamp>,
}

// TODO(andrew): consolidate From impls once RYW fully adopted
impl From<(Vec<KeyComparison>, bool, Option<Timestamp>)> for ViewQuery {
    fn from(
        (key_comparisons, block, ticket): (Vec<KeyComparison>, bool, Option<Timestamp>),
    ) -> Self {
        Self {
            key_comparisons,
            block,
            filter: None,
            timestamp: ticket,
        }
    }
}

impl From<(Vec<KeyComparison>, bool)> for ViewQuery {
    fn from((key_comparisons, block): (Vec<KeyComparison>, bool)) -> Self {
        Self {
            key_comparisons,
            block,
            filter: None,
            timestamp: None,
        }
    }
}

impl Service<ViewQuery> for View {
    type Response = LookupResult<Results>;
    type Error = ReadySetError;

    type Future = impl Future<Output = Result<Self::Response, Self::Error>> + Send;

    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        for s in &mut self.shards {
            let ni = self.node;
            ready!(s.poll_ready(cx))
                .map_err(rpc_err!("<View as Service<ViewQuery>>::poll_ready"))
                .map_err(|e| view_err(ni, e))?
        }
        Poll::Ready(Ok(()))
    }

    fn call(&mut self, mut query: ViewQuery) -> Self::Future {
        let ni = self.node;
        let span = if crate::trace_next_op() {
            Some(tracing::trace_span!(
                "view-request",
                ?query.key_comparisons,
                node = self.node.index()
            ))
        } else {
            None
        };

        let columns = Arc::clone(&self.columns);
        if self.shards.len() == 1 {
            let request = Tagged::from(ReadQuery::Normal {
                target: (self.node, self.name.clone(), 0),
                query,
            });

            let _guard = span.as_ref().map(tracing::Span::enter);
            tracing::trace!("submit request");

            return future::Either::Left(
                self.shards
                    .first_mut()
                    .call(request)
                    .map_err(rpc_err!("<View as Service<ViewQuery>>::call"))
                    .and_then(move |reply| async move {
                        reply
                            .v
                            .into_normal()
                            .ok_or_else(|| {
                                internal_err("Unexpected response type from reader service")
                            })?
                            .map(|l| {
                                l.map_results(|rows| {
                                    Results::new(rows.into(), Arc::clone(&columns))
                                })
                            })
                    })
                    .map_err(move |e| view_err(ni, e)),
            );
        }

        if let Some(ref span) = span {
            span.in_scope(|| tracing::trace!("shard request"));
        }
        let mut shard_queries = vec![Vec::new(); self.shards.len()];
        for comparison in query.key_comparisons.drain(..) {
            for shard in comparison.shard_keys(self.shards.len()) {
                #[allow(clippy::indexing_slicing)]
                // We built `shard_queries` to be the correct length, so it's safe to access
                // it by index in this case.
                shard_queries[shard].push(comparison.clone());
            }
        }

        let node = self.node;
        let name = self.name.clone();
        future::Either::Right(
            self.shards
                .iter_mut()
                .enumerate()
                .zip(shard_queries.into_iter())
                .filter_map(|((shardi, shard), shard_queries)| {
                    if shard_queries.is_empty() {
                        // poll_ready reserves a sender slot which we have to release
                        // we do that by dropping the old handle and replacing it with a clone
                        // https://github.com/tokio-rs/tokio/issues/898
                        *shard = shard.clone();
                        None
                    } else {
                        Some(((shardi, shard), shard_queries))
                    }
                })
                .map(move |((shardi, shard), shard_queries)| {
                    let request = Tagged::from(ReadQuery::Normal {
                        target: (node, name.clone(), shardi),
                        query: ViewQuery {
                            key_comparisons: shard_queries,
                            block: query.block,
                            filter: query.filter.clone(),
                            timestamp: query.timestamp.clone(),
                        },
                    });

                    let _guard = span.as_ref().map(tracing::Span::enter);
                    // make a span per shard
                    let span = if span.is_some() {
                        Some(tracing::trace_span!("view-shard", shardi))
                    } else {
                        None
                    };
                    let _guard = span.as_ref().map(tracing::Span::enter);
                    tracing::trace!("submit request shard");

                    shard
                        .call(request)
                        .map_err(rpc_err!("<View as Service<ViewQuery>>::call"))
                        .and_then(|reply| async move {
                            reply.v.into_normal().ok_or_else(|| {
                                internal_err("Unexpected response type from reader service")
                            })?
                        })
                        .map_err(move |e| view_err(ni, e))
                })
                .collect::<FuturesUnordered<_>>()
                .try_collect::<Vec<LookupResult<ReadReplyBatch>>>()
                .map_ok(move |e| {
                    // Flatten this to a single LookupResult<Results>.
                    e.into_iter()
                        .fold(LookupResult::Results(Vec::new()), |mut acc, x| {
                            if let LookupResult::Results(d) = &mut acc {
                                match x {
                                    LookupResult::NonBlockingMiss => {
                                        return LookupResult::NonBlockingMiss;
                                    }
                                    LookupResult::Results(u) => {
                                        d.extend(u.into_iter().map(|rows| {
                                            Results::new(rows.into(), Arc::clone(&columns))
                                        }));
                                    }
                                }
                            }
                            acc
                        })
                }),
        )
    }
}

#[allow(clippy::len_without_is_empty)]
impl View {
    /// Get the list of columns in this view.
    pub fn columns(&self) -> &[SqlIdentifier] {
        &*self.columns
    }

    /// Get the schema definition of this view.
    pub fn schema(&self) -> Option<&ViewSchema> {
        self.schema.as_ref()
    }

    /// Get the NodeIndex of the dataflow node that this
    /// view refers to.
    pub fn node(&self) -> &NodeIndex {
        &self.node
    }

    /// Get the current size of this view.
    ///
    /// Note that you must also continue to poll this `View` for the returned future to resolve.
    pub async fn len(&mut self) -> ReadySetResult<usize> {
        future::poll_fn(|cx| self.poll_ready(cx)).await?;

        let node = self.node;
        let name = self.name.clone();
        let mut rsps = self
            .shards
            .iter_mut()
            .enumerate()
            .map(|(shardi, shard)| {
                shard.call(Tagged::from(ReadQuery::Size {
                    target: (node, name.clone(), shardi),
                }))
            })
            .collect::<FuturesUnordered<_>>();

        let mut nrows = 0;
        while let Some(reply) = rsps
            .next()
            .await
            .transpose()
            .map_err(rpc_err!("View::len"))?
        {
            if let ReadReply::Size(rows) = reply.v {
                nrows += rows;
            } else {
                unreachable!();
            }
        }

        Ok(nrows)
    }

    /// Get the placeholder to key column index mapping for the reader node
    /// Each pair represents a mapping from placeholder index to reader key column index
    pub fn key_map(&self) -> &[(ViewPlaceholder, KeyColumnIdx)] {
        &self.key_mapping
    }

    /// Get the current keys of this view. For debugging only.
    pub async fn keys(&mut self) -> ReadySetResult<Vec<Vec<DataType>>> {
        future::poll_fn(|cx| self.poll_ready(cx)).await?;

        let node = self.node;
        let name = self.name.clone();
        let mut rsps = self
            .shards
            .iter_mut()
            .enumerate()
            .map(|(shardi, shard)| {
                shard.call(Tagged::from(ReadQuery::Keys {
                    target: (node, name.clone(), shardi),
                }))
            })
            .collect::<FuturesUnordered<_>>();

        let mut vec = vec![];
        while let Some(reply) = rsps
            .next()
            .await
            .transpose()
            .map_err(rpc_err!("View::keys"))?
        {
            if let ReadReply::Keys(mut keys) = reply.v {
                vec.append(&mut keys);
            } else {
                unreachable!();
            }
        }

        Ok(vec)
    }

    // TODO(andrew): consolidate RYW and normal reads into cohesive API once API design is settled.
    // RYW functionality currently added as duplicate methods so as not to disrupt current
    // reader usage until RYW is fully adopted

    /// Issue a raw `ViewQuery` against this view, and return the results.
    ///
    /// The method will block if the results are not yet available only when `block` is `true`.
    /// If `block` is false, misses will be returned as empty results. Any requested keys that have
    /// missing state will be backfilled (asynchronously if `block` is `false`).
    pub async fn raw_lookup(&mut self, query: ViewQuery) -> ReadySetResult<LookupResult<Results>> {
        future::poll_fn(|cx| self.poll_ready(cx)).await?;
        self.call(query).await
    }

    /// Retrieve the query results for the given parameter value.
    ///
    /// The method will block if the results are not yet available only when `block` is `true`.
    pub async fn lookup(&mut self, key: &[DataType], block: bool) -> ReadySetResult<Results> {
        self.lookup_ryw(key, block, None).await
    }

    /// Retrieve the query results for the given parameter values.
    ///
    /// The method will block if the results are not yet available only when `block` is `true`.
    /// If `block` is false, misses will be returned as empty results. Any requested keys that have
    /// missing state will be backfilled (asynchronously if `block` is `false`).
    pub async fn multi_lookup(
        &mut self,
        key_comparisons: Vec<KeyComparison>,
        block: bool,
    ) -> ReadySetResult<LookupResult<Results>> {
        self.raw_lookup((key_comparisons, block, None).into()).await
    }

    /// Retrieve the first query result for the given parameter value.
    ///
    /// The method will block if the results are not yet available only when `block` is `true`.
    pub async fn lookup_first(
        &mut self,
        key: &[DataType],
        block: bool,
    ) -> ReadySetResult<Option<Row>> {
        // TODO: Optimized version of this function?
        self.lookup_first_ryw(key, block, None).await
    }

    /// Retrieve the query results for the given parameter value.
    ///
    /// The method will block if the results are not yet available or do not have a timestamp
    /// satisfying the `ticket ` requirement only when `block` is `true`.
    /// If `block` is false, misses will be returned as empty results. Any requested keys that have
    /// missing state will be backfilled (asynchronously if `block` is `false`).
    pub async fn lookup_ryw(
        &mut self,
        key: &[DataType],
        block: bool,
        ticket: Option<Timestamp>,
    ) -> ReadySetResult<Results> {
        // TODO: Optimized version of this function?
        let key = Vec1::try_from_vec(key.into())
            .map_err(|_| view_err(self.node, ReadySetError::EmptyKey))?;
        let rs = self
            .multi_lookup_ryw(vec![KeyComparison::Equal(key)], block, ticket)
            .await?;
        rs.into_results()
            .ok_or_else(|| internal_err("incorrect type returned for lookup"))?
            .into_iter()
            .next()
            .ok_or_else(|| internal_err("no result found for key"))
    }

    /// Retrieve the query results for the given parameter values
    ///
    /// The method will block if the results are not yet available or do not have a timestamp
    /// satisfying the `ticket ` requirement only when `block` is `true`.
    /// If `block` is false, misses will be returned as empty results. Any requested keys that have
    /// missing state will be backfilled (asynchronously if `block` is `false`).
    pub async fn multi_lookup_ryw(
        &mut self,
        key_comparisons: Vec<KeyComparison>,
        block: bool,
        ticket: Option<Timestamp>,
    ) -> ReadySetResult<LookupResult<Results>> {
        self.raw_lookup((key_comparisons, block, ticket).into())
            .await
    }

    /// Retrieve the first query result for the given parameter value.
    ///
    /// The method will block if the results are not yet available or do not have a timestamp
    /// satisfying the `ticket ` requirement only when `block` is `true`.
    /// If `block` is false, misses will be returned as empty results. Any requested keys that have
    /// missing state will be backfilled (asynchronously if `block` is `false`).
    pub async fn lookup_first_ryw(
        &mut self,
        key: &[DataType],
        block: bool,
        ticket: Option<Timestamp>,
    ) -> ReadySetResult<Option<Row>> {
        // TODO: Optimized version of this function?
        let key = Vec1::try_from_vec(key.into())
            .map_err(|_| view_err(self.node, ReadySetError::EmptyKey))?;
        let rs = self
            .multi_lookup_ryw(vec![KeyComparison::Equal(key)], block, ticket)
            .await?;
        Ok(rs
            .into_results()
            .ok_or_else(|| internal_err("incorrect type returned for lookup"))?
            .into_iter()
            .next()
            .ok_or_else(|| internal_err("no result found for key"))?
            .into_iter()
            .next())
    }
}

#[derive(Debug, Default)]
#[doc(hidden)]
#[repr(transparent)]
pub struct ReadReplyBatch(Vec<Vec<DataType>>);

use serde::de::{self, DeserializeSeed, Deserializer, Visitor};
impl<'de> Deserialize<'de> for ReadReplyBatch {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct Elem;

        impl<'de> Visitor<'de> for Elem {
            type Value = Vec<Vec<DataType>>;

            fn expecting(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.write_str("Vec<Vec<DataType>>")
            }

            fn visit_bytes<E>(self, bytes: &[u8]) -> Result<Self::Value, E>
            where
                E: de::Error,
            {
                use bincode::Options;
                bincode::options()
                    .deserialize(bytes)
                    .map_err(de::Error::custom)
            }
        }

        impl<'de> DeserializeSeed<'de> for Elem {
            type Value = Vec<Vec<DataType>>;

            fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
            where
                D: Deserializer<'de>,
            {
                deserializer.deserialize_bytes(self)
            }
        }

        deserializer.deserialize_bytes(Elem).map(ReadReplyBatch)
    }
}

impl From<ReadReplyBatch> for Vec<Vec<DataType>> {
    fn from(val: ReadReplyBatch) -> Vec<Vec<DataType>> {
        val.0
    }
}

impl From<Vec<Vec<DataType>>> for ReadReplyBatch {
    fn from(v: Vec<Vec<DataType>>) -> Self {
        Self(v)
    }
}

impl IntoIterator for ReadReplyBatch {
    type Item = Vec<DataType>;
    type IntoIter = std::vec::IntoIter<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.0.into_iter()
    }
}

impl Extend<Vec<DataType>> for ReadReplyBatch {
    fn extend<T>(&mut self, iter: T)
    where
        T: IntoIterator<Item = Vec<DataType>>,
    {
        self.0.extend(iter)
    }
}

impl AsRef<[Vec<DataType>]> for ReadReplyBatch {
    fn as_ref(&self) -> &[Vec<DataType>] {
        &self.0[..]
    }
}

impl std::ops::Deref for ReadReplyBatch {
    type Target = Vec<Vec<DataType>>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl std::ops::DerefMut for ReadReplyBatch {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[allow(clippy::eq_op)]
    mod key_comparison {
        use launchpad::eq_laws;

        use super::*;

        eq_laws!(KeyComparison);
    }
}
