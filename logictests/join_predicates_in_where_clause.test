statement ok
create table a(id int, b_id int);

statement ok
create table b(id int, other int);

statement ok
insert into a values (1, 1), (2, 1), (3, 3), (4, 5);

statement ok
insert into b values (1, 10), (2, 20), (3, 30), (4, 40), (5, 50);

query II rowsort
select a.id, b.other from a, b where a.b_id = b.id;
----
1
10
2
10
3
30
4
50

query II rowsort
select a.id, b.other from a join b where a.b_id = b.id;
----
1
10
2
10
3
30
4
50

query II rowsort
select a.id, c.other from a join (select * from b) as c where a.b_id = c.id;
----
1
10
2
10
3
30
4
50

statement ok
create table c(id int, name text);

statement ok
create table d(id int, name text);

statement ok
insert into c values (1, 'hello'), (2, 'WORLD'), (3, 'HELLO');

statement ok
insert into d values (1, 'hello'), (4, 'not world');

query IT rowsort
select c.id, d.name from c join d where c.name = d.name;
----
1
hello

query IT rowsort
select c.id, d.name from c join d where lower(c.name) = d.name;
----
1
hello
3
hello

query IT rowsort
select c.id, d.name from c join d where c.name = upper(d.name);
----
3
hello

query TI rowsort
select c.name, d.id from c join d where lower(c.name) = substr(d.name, 5, 5);
----
WORLD
4

query IT rowsort
select c.id, d.name from c join d where lower(d.name) = lower(c.name);
----
1
hello
3
hello

query IT rowsort
select c.id, d.name from c join d where upper(d.name) = c.name;
----
3
hello

# Test nested functions
query IT rowsort
select c.id, d.name from c join d where ascii(substr(lower(c.name), 1, 5)) = ascii(lower(upper(d.name)));
----
1
hello
3
hello

