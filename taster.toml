version = 2
run_tests = false

[uniform]
command = "cargo"
args = ["run", "--release", "--bin", "vote", "--", "localsoup"]
regexs = ["^(write\t50)\t([0-9.]+)", "^(read\t50)\t([0-9.]+)", "^(write\t95)\t([0-9.]+)", "^(read\t95)\t([0-9.]+)"]
lower_better = true

[uniform-unsharded]
command = "cargo"
args = ["run", "--release", "--bin", "vote", "--", "localsoup", "--shards=1"]
regexs = ["^(write\t50)\t([0-9.]+)", "^(read\t50)\t([0-9.]+)", "^(write\t95)\t([0-9.]+)", "^(read\t95)\t([0-9.]+)"]
lower_better = true

[purged-vote-replay]
command = "cargo"
args = ["run", "--release", "--bin", "vote-purge-stress", "--", "-t", "3", "--purge", "all"]
regexs = ["^(replay\t50)\t([0-9.]+)", "^(replay\t95)\t([0-9.]+)"]
lower_better = true

[query_generator]
command = "cargo"
args = [
    "run", "--release", "--bin", "query_generator", "--", "benchmark", "-o", "json", "--rows-per-table", "50",
    "param,aggregates",
    "filters,param",
    "distinct,param",
    "joins,param,project_literal",
    "filters,multiple_parameters,joins"
]
format = "json"
benchmark_name_key = "query"

    [query_generator.metrics]
    cold_materialization_size = { lower_better = true }
    cold_write_time_ns = { key = "cold_write_time", lower_better = true }
    upquery_forward_time_ns = { key = "upquery_time", lower_better = true }
    forward_time_ns = { key = "forward_time", lower_better = true }
    cold_read_time_ns = { key = "cold_read_time", lower_better = true }
    warm_write_time_ns = { key = "warm_write_time", lower_better = true }
    warm_read_time_ns = { key = "warm_read_time", lower_better = true }
    warm_materialization_size = { lower_better = true }
