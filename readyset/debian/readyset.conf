## Environment variables for readyset
## Uncomment any of the following lines to change the defaults.

## NOTE:  UPSTREAM_DB_URL and LISTEN_ADDRESS are required values and must be
## updated before starting readyset.

## URL for the upstream database to connect to. Should include username and
## password if necessary (required).  Example:
##    postgresql://readyset:readyset@127.0.0.1:5432/testdb
UPSTREAM_DB_URL="protocol://user:password@hostaddr:port/dbname"

## IP:PORT to listen on (required)
LISTEN_ADDRESS=0.0.0.0:5433

## Directory in which to store replicated table data.
STORAGE_DIR=/var/lib/readyset

## Optional path to which to write logs.  Logs will be written to
## `readyset.log` within this path.  If unset, defaults to stdout.  Logs will
## roll over based on LOG_ROTATION (see below).
LOG_PATH=/var/lib/readyset

## Log rotation policy to use if LOG_PATH is set.  Possible values: daily,
## hourly, minutely, never.
LOG_ROTATION=daily

## Format to use when emitting log events
## Possible values:
##   - compact: Corresponds to [`tracing_subscriber::fmt::format::Compact`]
##   - full:    Corresponds to [`tracing_subscriber::fmt::format::Full`]
##   - pretty:  Corresponds to [`tracing_subscriber::fmt::format::Pretty`]
##   - json:    Corresponds to [`tracing_subscriber::fmt::format::Json`]
# LOG_FORMAT=full

## Log level filter for spans and events. The log level filter string is a
## comma separated list of directives. See [`tracing_subscriber::EnvFilter`] for
## full documentation on the directive syntax.
## Examples:
##    Log at INFO level for all crates and dependencies. ```bash LOG_LEVEL=info ```
##    Log at TRACE level for all crates and dependencies except tower which
##       should be logged at ERROR level. ```bash LOG_LEVEL=trace,tower=error ```
# LOG_LEVEL=info

## IP:PORT to host endpoint for scraping metrics from the adapter
# METRICS_ADDRESS=0.0.0.0:6034

## By default, ReadySet attempts to snapshot and replicate all tables in the #
## database specified in UPSTREAM_DB_URL. However, if the queries to cache in
## ReadySet access only a subset of tables in the database, this option can be
## used to limit the tables ReadySet snapshots and replicates. Filtering out
## tables that will not be used in caches will speed up the snapshotting
## process. This option accepts a comma-separated list of `<schema>.<table>`
## (specific table in a schema) or `<schema>.*` (all tables in a schema) for
## Postgres and `<database>.<table>` for MySQL. Only tables specified in the list
## will be eligible to be used by caches.
# REPLICATION_TABLES=

## By default, ReadySet attempts to snapshot and replicate all tables in the
## database specified in UPSTREAM_DB_URL. However, if the queries to cache in
## ReadySet will *not* access a subset of tables in the database, this option can
## be used to limit the tables ReadySet snapshots and replicates. Filtering out
## tables that will not be used in caches will speed up the snapshotting process.
## This option accepts a comma-separated list of `<schema>.<table>` (specific
## table in a schema) or `<schema>.*` (all tables in a schema) for Postgres and
## `<database>.<table>` for MySQL. Tables specified in the list will not be
## eligible to be used by caches.
# REPLICATION_TABLES_IGNORE=

## Memory high water mark, in bytes. If process heap memory exceeds this value,
## we will perform evictions from partially materialized state. (0 = unlimited)
# READYSET_MEMORY_LIMIT=0

## The pkcs12 identity file (certificate and key) used by ReadySet for
## establishing TLS connections as the server.  ReadySet will not accept TLS
## connections if there is no identity file specified.
# READYSET_IDENTITY_FILE=/path/to/file.p12

## Authentication method to use for PostgreSQL clients
## [possible values: cleartext, scram-sha-256]
# POSTGRES_AUTHENTICATION_METHOD=scram-sha-256

## A path to a pem or der certificate of the root that the upstream connection
## will trust.
# SSL_ROOT_CERT=

## Allow ReadySet to start even if the file descriptor limit (ulimit -n) is
## below our minimum requirement. If set, ReadySet still raises the soft limit to
## min(our requirement, hard limit). It just doesn't treat (our requirement >
## hard limit) as a fatal error.
# IGNORE_ULIMIT_CHECK=

## Whether to disable telemetry reporting.
# DISABLE_TELEMETRY=false
